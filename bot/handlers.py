from aiogram import F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
import logging
import os
from config import USERS_TO_MATCH_JSON, PLACES_CSV
from aiogram.exceptions import TelegramBadRequest

from .states import Form, MainMenu
from .utils import (
    get_user_data, save_user_data, update_user_to_match, 
    get_places_for_office, is_valid_time_interval, convert_to_match_format,
    run_matcher_and_get_result, read_notified_groups, write_notified_groups, is_user_notified, mark_user_notified
)
from .keyboards import (
    get_office_keyboard, get_time_start_keyboard, get_time_end_keyboard,
    get_add_slot_keyboard, get_lunch_duration_keyboard, get_favorite_places_keyboard,
    get_disliked_places_keyboard, get_company_size_keyboard, get_confirmation_keyboard,
    get_main_menu_keyboard, get_edit_menu_keyboard, get_lunch_preference_keyboard,
    get_back_to_menu_keyboard, get_lunch_favorite_places_keyboard, get_lunch_company_keyboard,
    get_lunch_confirm_keyboard, get_after_edit_keyboard,
    get_lunch_time_start_keyboard, get_lunch_time_end_keyboard, get_duration_keyboard
)
from aiogram import Bot
from aiogram import Router, F, types

logger = logging.getLogger(__name__)

# --- –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å notify_all_new_groups –≤—ã—à–µ ---
async def notify_all_new_groups(bot: Bot, output_file: str):
    import json
    import logging
    print("notify_all_new_groups CALLED", flush=True)
    logging.info("notify_all_new_groups CALLED")
    notified = read_notified_groups()
    with open(output_file, 'r', encoding='utf-8') as f:
        groups = json.load(f)
    # –ü–æ–ª—É—á–∏–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —É—á–∞—Å—Ç–≤—É—é—â–∏—Ö –≤ –ø–æ–¥–±–æ—Ä–µ (users_to_match.json)
    with open('data/users_to_match.json', 'r', encoding='utf-8') as f:
        users_to_match = json.load(f)
    match_usernames = set(u['login'] for u in users_to_match)
    # –ü–æ–ª—É—á–∏–º user_id –¥–ª—è —ç—Ç–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ users_data.csv
    import csv
    user_id_map = {}
    try:
        with open('data/users_data.csv', 'r', encoding='utf-8') as csvfile:
            reader = csv.DictReader(csvfile)
            for row in reader:
                if row['username'] in match_usernames:
                    user_id_map[row['username']] = int(row['user_id'])
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ users_data.csv: {e}")
    # –°–æ–±–µ—Ä—ë–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö –Ω–∞—à–ª–∞—Å—å –≥—Ä—É–ø–ø–∞
    users_with_group = set()
    for group in groups:
        if group.get("lunch_time") and group.get("place"):
            users_with_group.update(group["participants"])
    # –û—Ç–ø—Ä–∞–≤–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–µ–º, —É –∫–æ–≥–æ –Ω–µ—Ç –≥—Ä—É–ø–ø—ã
    for username in match_usernames - users_with_group:
        user_id = user_id_map.get(username)
        logging.info(f"[notify_all_new_groups] –ù–µ—Ç –≥—Ä—É–ø–ø—ã –¥–ª—è {username} (user_id={user_id})")
        if user_id:
            try:
                await bot.send_message(user_id, '–°–µ–≥–æ–¥–Ω—è –±–æ–ª—å—à–µ –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Å–ª–æ—Ç–æ–≤ –¥–ª—è –æ–±–µ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞!')
                logging.info(f"[notify_all_new_groups] –°–æ–æ–±—â–µ–Ω–∏–µ '–Ω–µ—Ç —Å–ª–æ—Ç–æ–≤' –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {username} (user_id={user_id})")
            except Exception as e:
                logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ {username} ({user_id}): {e}")
    # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø
    for group in groups:
        group_key = f"{sorted(group['participants'])}_{group.get('lunch_time')}_{group.get('place')}"
        for username in group['participants']:
            if not is_user_notified(username, group_key):
                user_id = user_id_map.get(username)
                logging.info(f"[notify_all_new_groups] –ì—Ä—É–ø–ø–∞: {group}, username={username}, user_id={user_id}")
                if user_id:
                    if group["lunch_time"] and group["place"]:
                        partners = [p for p in group["participants"] if p != username]
                        partners_str = ", ".join(partners) if partners else "–í—ã –æ–±–µ–¥–∞–µ—Ç–µ –≤ –æ–¥–∏–Ω–æ—á–∫—É."
                        lunch_time = f"{group['lunch_time'][0]}‚Äì{group['lunch_time'][1]}"
                        place = group["place"]
                        maps_link = group.get("maps_link", "")
                        msg = (
                            f"üçΩ –í–∞—à –æ–±–µ–¥:\n"
                            f"–í—Ä–µ–º—è: {lunch_time}\n"
                            f"–ú–µ—Å—Ç–æ: {place}\n"
                            f"–°—Å—ã–ª–∫–∞: {maps_link}\n"
                            f"–ü–∞—Ä—Ç–Ω–µ—Ä—ã: {partners_str}"
                        )
                    else:
                        msg = "–ü–æ–∫–∞ —á—Ç–æ –º—ã –Ω–µ —Å–º–æ–≥–ª–∏ –ø–æ–¥–æ–±—Ä–∞—Ç—å –≤–∞–º –ø–∞—Ä—É –∏–ª–∏ –∫–æ–º–ø–∞–Ω–∏—é –¥–ª—è –æ–±–µ–¥–∞, –Ω–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ–¥–±–µ—Ä—ë–º!"
                    logging.info(f"[notify_all_new_groups] –ü—ã—Ç–∞—é—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {username} (user_id={user_id}): {msg}")
                    try:
                        await bot.send_message(user_id, msg)
                        logging.info(f"[notify_all_new_groups] –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {username} (user_id={user_id})")
                    except Exception as e:
                        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ {username} ({user_id}): {e}")
                else:
                    logging.warning(f"[notify_all_new_groups] –ù–µ –Ω–∞–π–¥–µ–Ω user_id –¥–ª—è {username}")
                mark_user_notified(username, group_key)

# –ó–∞–º–µ–Ω–∏—Ç—å –≤—Å–µ –≤—ã–∑–æ–≤—ã edit_text –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π TelegramBadRequest
async def safe_edit_text(message, text, **kwargs):
    try:
        await message.edit_text(text, **kwargs)
    except TelegramBadRequest as e:
        if 'message is not modified' in str(e):
            logging.info(f'[safe_edit_text] –ü–æ–ø—ã—Ç–∫–∞ –∏–∑–º–µ–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —Ç–æ—Ç –∂–µ —Ç–µ–∫—Å—Ç: "{text[:40]}..."')
        else:
            logging.error(f'[safe_edit_text] TelegramBadRequest: {e}')
            raise

# –ë–∞–∑–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
async def show_main_menu(message, user_data=None):
    keyboard = get_main_menu_keyboard()
    # –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ä–∞–∑–ª–∏—á–∞–µ–º Message –∏ CallbackQuery.message
    if isinstance(message, Message):
        await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=keyboard)
    else:
        await safe_edit_text(message, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=keyboard)

async def start_profile_creation(message, state):
    await state.clear()
    keyboard = get_office_keyboard()
    await message.answer("–î–∞–≤–∞–π—Ç–µ –∑–∞–ø–æ–ª–Ω–∏–º –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –ø–æ–¥–±–æ—Ä–∞ –∫–æ–º–ø–∞–Ω–∏–∏ –Ω–∞ –æ–±–µ–¥. –î–ª—è –Ω–∞—á–∞–ª–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –æ—Ñ–∏—Å:", reply_markup=keyboard)
    await state.set_state(Form.office)

# –ö–æ–º–∞–Ω–¥–∞ /start
async def cmd_start(message: Message, state: FSMContext):
    user_id = message.from_user.id
    username = message.from_user.username or "No username"
    
    user_data = get_user_data(user_id)
    
    if user_data:
        await show_main_menu(message, user_data)
        await state.set_state(MainMenu.main)
    else:
        await start_profile_creation(message, state)

async def cmd_notify_groups(message: types.Message):
    await notify_all_new_groups(message.bot, "data/output.json")
    await message.answer("–†–∞—Å—Å—ã–ª–∫–∞ –ø–æ –≥—Ä—É–ø–ø–∞–º –∏–∑ output.json –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.")

router = Router()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
async def process_main_menu(callback_query: CallbackQuery, state: FSMContext):
    action = callback_query.data.split(':')[1]
    user_id = callback_query.from_user.id
    username = callback_query.from_user.username or f"user{user_id}"
    user_data = get_user_data(user_id)
    
    if action == "book_lunch":
        # --- –î–û–ë–ê–í–õ–ï–ù–û: –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ users_to_match.json –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è ---
        if user_data:
            from .utils import update_user_to_match, run_matcher_and_get_result_async, convert_to_match_format
            import asyncio
            import json
            import logging
            import os
            match_params = convert_to_match_format(user_data, username)
            update_user_to_match(username, match_params)
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–∫–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–µ–π—á–∞—Å –≤ users_to_match.json
            with open("data/users_to_match.json", "r", encoding="utf-8") as f:
                users_to_match = json.load(f)
            if len(users_to_match) >= 2:
                # –û—á–∏—â–∞–µ–º notified_groups.json –ø–µ—Ä–µ–¥ –ø–æ–¥–±–æ—Ä–æ–º
                notified_path = os.path.join("data", "notified_groups.json")
                if os.path.exists(notified_path):
                    os.remove(notified_path)
                from config import USERS_TO_MATCH_JSON, PLACES_CSV
                output_file = os.path.join("data", "output.json")
                await run_matcher_and_get_result_async(username, USERS_TO_MATCH_JSON, PLACES_CSV, output_file)
                logging.info("BEFORE notify_all_new_groups")
                print("BEFORE notify_all_new_groups", flush=True)
                try:
                    await notify_all_new_groups(callback_query.bot, output_file)
                except Exception as e:
                    logging.error(f"notify_all_new_groups ERROR: {e}")
                    print(f"notify_all_new_groups ERROR: {e}", flush=True)
                logging.info("AFTER notify_all_new_groups")
                print("AFTER notify_all_new_groups", flush=True)
                await safe_edit_text(callback_query.message,
                    "–ö–æ–º–ø–∞–Ω–∏—è –Ω–∞ –æ–±–µ–¥ –ø–æ–¥–±–∏—Ä–∞–µ—Ç—Å—è! –ö–æ–≥–¥–∞ –Ω–∞–π–¥–µ—Ç—Å—è –ø–æ–¥—Ö–æ–¥—è—â–∞—è –∫–æ–º–ø–∞–Ω–∏—è, –º—ã –≤–∞—Å –æ–ø–æ–≤–µ—Å—Ç–∏–º!",
                    reply_markup=get_back_to_menu_keyboard()
                )
            else:
                await safe_edit_text(callback_query.message,
                    "–í—ã –∑–∞–ø–∏—Å–∞–Ω—ã, –∂–¥–∏—Ç–µ –∫–æ–º–ø–∞–Ω–∏—é! –ö–∞–∫ —Ç–æ–ª—å–∫–æ –∫—Ç–æ-—Ç–æ –µ—â—ë –∑–∞–ø–∏—à–µ—Ç—Å—è, –º—ã –ø–æ–¥–±–µ—Ä—ë–º –≥—Ä—É–ø–ø—É.",
                    reply_markup=get_back_to_menu_keyboard()
                )
            await state.set_state(MainMenu.main)
            await callback_query.answer()
            return
        keyboard = get_lunch_preference_keyboard()
        await safe_edit_text(callback_query.message,
            "–ö–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏ –∫–æ–º–ø–∞–Ω–∏—é –Ω–∞ –æ–±–µ–¥?",
            reply_markup=keyboard
        )
        await state.set_state(MainMenu.lunch_preference)
    
    elif action == "edit_profile":
        keyboard = get_edit_menu_keyboard()
        await safe_edit_text(callback_query.message,
            "–í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:",
            reply_markup=keyboard
        )
        await state.set_state(MainMenu.edit_field)
    
    elif action == "show_profile":
        if user_data:
            time_slots_formatted = ", ".join([f"{start}-{end}" for start, end in user_data.get('time_slots', [])])
            
            profile_text = (
                "–í–∞—à —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å:\n"
                f"- –û—Ñ–∏—Å: {user_data.get('office', '–ù–µ –≤—ã–±—Ä–∞–Ω')}\n"
                f"- –°–ª–æ—Ç—ã –≤—Ä–µ–º–µ–Ω–∏: {time_slots_formatted}\n"
                f"- –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–±–µ–¥–∞: {user_data.get('lunch_duration', '–ù–µ –≤—ã–±—Ä–∞–Ω–∞')} –º–∏–Ω—É—Ç\n"
                f"- –õ—é–±–∏–º—ã–µ –º–µ—Å—Ç–∞: {', '.join(user_data.get('favorite_places', ['–ù–µ –≤—ã–±—Ä–∞–Ω—ã']))}\n"
                f"- –ù–µ–ª—é–±–∏–º—ã–µ –º–µ—Å—Ç–∞: {', '.join(user_data.get('disliked_places', ['–ù–µ –≤—ã–±—Ä–∞–Ω—ã']))}\n"
                f"- –†–∞–∑–º–µ—Ä –∫–æ–º–ø–∞–Ω–∏–∏: {', '.join(user_data.get('company_size', ['–ù–µ –≤—ã–±—Ä–∞–Ω']))}\n"
                f"- –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {user_data.get('last_updated', '')}"
            )
            
            keyboard = get_back_to_menu_keyboard()
            await safe_edit_text(callback_query.message, profile_text, reply_markup=keyboard)
            await state.set_state(MainMenu.main)
        else:
            await safe_edit_text(callback_query.message,
                "–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –ø—Ä–æ—Ñ–∏–ª—è. –î–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º –µ–≥–æ!",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", callback_data="menu:create_profile")]
                ])
            )
    
    elif action == "back" or action == "create_profile":
        if action == "create_profile":
            await start_profile_creation(callback_query.message, state)
        else:
            await show_main_menu(callback_query.message, user_data)
            await state.set_state(MainMenu.main)
    
    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –æ–±–µ–¥–∞
async def process_lunch_preference(callback_query: CallbackQuery, state: FSMContext):
    choice = callback_query.data.split(':')[1]
    user_id = callback_query.from_user.id
    username = callback_query.from_user.username or f"user{user_id}"
    user_data = get_user_data(user_id)
    
    if choice == "by_profile":
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–≤–æ–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è
        if user_data:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –º–∞—Ç—á–∏–Ω–≥–∞ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
            match_params = convert_to_match_format(user_data, username)
            update_user_to_match(username, match_params)
            
            await safe_edit_text(callback_query.message,
                "–û—Ç–ª–∏—á–Ω–æ! –ú—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–∞—à–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è –ø–æ–¥–±–æ—Ä–∞ –∫–æ–º–ø–∞–Ω–∏–∏ –Ω–∞ –æ–±–µ–¥ —Å–µ–≥–æ–¥–Ω—è.\n"
                "–ö–æ–≥–¥–∞ –Ω–∞–π–¥–µ—Ç—Å—è –ø–æ–¥—Ö–æ–¥—è—â–∞—è –∫–æ–º–ø–∞–Ω–∏—è, –º—ã –≤–∞—Å –æ–ø–æ–≤–µ—Å—Ç–∏–º.",
                reply_markup=get_back_to_menu_keyboard()
            )
            
            await state.set_state(MainMenu.main)
        else:
            await safe_edit_text(callback_query.message,
                "–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –ø—Ä–æ—Ñ–∏–ª—è. –î–∞–≤–∞–π—Ç–µ —Å–Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω–∏–º –µ–≥–æ.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="–ó–∞–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", callback_data="menu:create_profile")]
                ])
            )
    
    elif choice == "custom":
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –æ–±–µ–¥–∞
        # –ù–∞—á–∏–Ω–∞–µ–º —Å –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏
        await state.update_data(custom_lunch_data={})
        
        # –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–æ—Ä –æ—Ñ–∏—Å–∞
        keyboard = get_office_keyboard()
        await safe_edit_text(callback_query.message,
            "–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ñ–∏—Å, –∏–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Å–µ–≥–æ–¥–Ω—è –æ–±–µ–¥–∞–µ—Ç–µ:",
            reply_markup=keyboard
        )
        await state.set_state(MainMenu.lunch_office)
    
    await callback_query.answer()

# --- –î–û–ë–ê–í–ò–¢–¨: –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –æ—Ñ–∏—Å–∞ –¥–ª—è custom lunch ---
async def process_lunch_office(callback_query: CallbackQuery, state: FSMContext):
    office = callback_query.data.split(':', 1)[1]
    custom_lunch_data = (await state.get_data()).get('custom_lunch_data', {})
    custom_lunch_data['office'] = office
    await state.update_data(custom_lunch_data=custom_lunch_data)
    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤—ã–±–æ—Ä—É –≤—Ä–µ–º–µ–Ω–∏
    keyboard = get_lunch_time_start_keyboard()
    await safe_edit_text(callback_query.message,
        f"–û—Ñ–∏—Å –≤—ã–±—Ä–∞–Ω: {office}\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—á–∞–ª–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Å–ª–æ—Ç–∞ –¥–ª—è —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –æ–±–µ–¥–∞:",
        reply_markup=keyboard
    )
    await state.set_state(MainMenu.lunch_time_start)
    await callback_query.answer()

# –í custom lunch –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏ callback_data
async def process_lunch_time_start(callback_query: CallbackQuery, state: FSMContext):
    start_time = callback_query.data.split(':', 1)[1]
    await state.update_data(lunch_start_time=start_time)
    keyboard = get_lunch_time_end_keyboard(start_time)
    await safe_edit_text(callback_query.message,
        f"–í—ã–±—Ä–∞–Ω–æ –Ω–∞—á–∞–ª–æ: {start_time}\n\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω–µ—Ü –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Å–ª–æ—Ç–∞:",
        reply_markup=keyboard
    )
    await state.set_state(MainMenu.lunch_time_end)
    await callback_query.answer()

async def process_lunch_time_end(callback_query: CallbackQuery, state: FSMContext):
    end_time = callback_query.data.split(':', 1)[1]
    data = await state.get_data()
    start_time = data.get('lunch_start_time')
    custom_lunch_data = data.get('custom_lunch_data', {})
    time_slots = custom_lunch_data.get('time_slots', [])
    if is_valid_time_interval(start_time, end_time):
        time_slots.append([start_time, end_time])
        custom_lunch_data['time_slots'] = time_slots
        await state.update_data(custom_lunch_data=custom_lunch_data)
        keyboard = get_add_slot_keyboard()
        await safe_edit_text(callback_query.message,
            f"–î–æ–±–∞–≤–ª–µ–Ω —Å–ª–æ—Ç: {start_time} - {end_time}\n–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –æ–¥–∏–Ω –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Å–ª–æ—Ç?",
            reply_markup=keyboard
        )
        await state.set_state(MainMenu.lunch_time_add_more)
    else:
        keyboard = get_lunch_time_start_keyboard()
        await safe_edit_text(callback_query.message,
            "–û—à–∏–±–∫–∞: –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–∑–∂–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—á–∞–ª–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Å–ª–æ—Ç–∞:",
            reply_markup=keyboard
        )
        await state.set_state(MainMenu.lunch_time_start)
    await callback_query.answer()

async def process_lunch_time_add_more(callback_query: CallbackQuery, state: FSMContext):
    choice = callback_query.data.split(':')[1]
    if choice == "yes":
        keyboard = get_lunch_time_start_keyboard()
        await safe_edit_text(callback_query.message,
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—á–∞–ª–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Å–ª–æ—Ç–∞:",
            reply_markup=keyboard
        )
        await state.set_state(MainMenu.lunch_time_start)
    else:
        # –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –≤—Å–µ—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ ‚Äî –≤—ã–±–æ—Ä –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –æ–±–µ–¥–∞
        keyboard = get_lunch_duration_keyboard()
        await safe_edit_text(callback_query.message,
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–±–µ–¥–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:",
            reply_markup=keyboard
        )
        await state.set_state(MainMenu.lunch_duration)
    await callback_query.answer()

# –ù–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –æ–±–µ–¥–∞ –≤ custom lunch
async def process_lunch_custom_duration(callback_query: CallbackQuery, state: FSMContext):
    duration = callback_query.data.split(':')[1]
    data = await state.get_data()
    custom_lunch_data = data.get('custom_lunch_data', {})
    custom_lunch_data['max_lunch_duration'] = int(duration)
    await state.update_data(custom_lunch_data=custom_lunch_data)
    office = custom_lunch_data.get('office')
    places_for_office = get_places_for_office(office)
    fav_places = custom_lunch_data.get('favourite_places', [])
    keyboard = get_lunch_favorite_places_keyboard(places_for_office, fav_places)
    await safe_edit_text(callback_query.message,
        "–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—Ç–∞, –∫–æ—Ç–æ—Ä—ã–µ –≤–∞–º –Ω—Ä–∞–≤—è—Ç—Å—è –¥–ª—è –æ–±–µ–¥–∞ —Å–µ–≥–æ–¥–Ω—è. –ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ. –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –Ω–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ'.",
        reply_markup=keyboard
    )
    await state.set_state(MainMenu.lunch_place)
    await callback_query.answer()

async def process_lunch_place(callback_query: CallbackQuery, state: FSMContext):
    place = callback_query.data.split(':')[1]
    data = await state.get_data()
    custom_lunch_data = data.get('custom_lunch_data', {})
    fav_places = custom_lunch_data.get('favourite_places', [])
    if place == "done":
        selected_sizes = custom_lunch_data.get('team_size_lst', [])
        keyboard = get_lunch_company_keyboard(selected_sizes)
        await safe_edit_text(callback_query.message,
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∫–æ–º–ø–∞–Ω–∏–∏ –¥–ª—è –æ–±–µ–¥–∞ —Å–µ–≥–æ–¥–Ω—è:",
            reply_markup=keyboard
        )
        await state.set_state(MainMenu.lunch_company_size)
    else:
        if place in fav_places:
            fav_places.remove(place)
        else:
            fav_places.append(place)
        custom_lunch_data['favourite_places'] = fav_places
        await state.update_data(custom_lunch_data=custom_lunch_data)
        user_id = callback_query.from_user.id
        user_data = get_user_data(user_id)
        office = user_data.get('office') if user_data else None
        places_for_office = get_places_for_office(office)
        keyboard = get_lunch_favorite_places_keyboard(places_for_office, fav_places)
        await safe_edit_text(callback_query.message,
            "–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—Ç–∞, –∫–æ—Ç–æ—Ä—ã–µ –≤–∞–º –Ω—Ä–∞–≤—è—Ç—Å—è –¥–ª—è –æ–±–µ–¥–∞ —Å–µ–≥–æ–¥–Ω—è. –ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ. –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –Ω–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ'.",
            reply_markup=keyboard
        )
    await callback_query.answer()

async def process_lunch_company(callback_query: CallbackQuery, state: FSMContext):
    company_size = callback_query.data.split(':')[1]
    data = await state.get_data()
    custom_lunch_data = data.get('custom_lunch_data', {})
    sizes = custom_lunch_data.get('team_size_lst', [])
    if company_size == "done":
        user_id = callback_query.from_user.id
        username = callback_query.from_user.username or f"user{user_id}"
        user_data = get_user_data(user_id)
        match_params = convert_to_match_format(user_data, username)
        if 'time_slots' in custom_lunch_data:
            match_params['time_slots'] = custom_lunch_data['time_slots']
        if 'favourite_places' in custom_lunch_data:
            match_params['favourite_places'] = custom_lunch_data['favourite_places']
        if 'team_size_lst' in custom_lunch_data:
            match_params['team_size_lst'] = custom_lunch_data['team_size_lst']
        if 'max_lunch_duration' in custom_lunch_data:
            match_params['max_lunch_duration'] = custom_lunch_data['max_lunch_duration']
        time_slots_formatted = ", ".join([f"{start}-{end}" for start, end in match_params['time_slots']])
        summary = (
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–æ–¥–±–æ—Ä–∞ –æ–±–µ–¥–∞ —Å–µ–≥–æ–¥–Ω—è:\n"
            f"- –û—Ñ–∏—Å: {match_params.get('office', '–ù–µ –≤—ã–±—Ä–∞–Ω')}\n"
            f"- –°–ª–æ—Ç—ã –≤—Ä–µ–º–µ–Ω–∏: {time_slots_formatted}\n"
            f"- –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–±–µ–¥–∞: {match_params.get('max_lunch_duration', '–ù–µ –≤—ã–±—Ä–∞–Ω–∞')} –º–∏–Ω—É—Ç\n"
            f"- –õ—é–±–∏–º—ã–µ –º–µ—Å—Ç–∞: {', '.join(match_params.get('favourite_places', ['–ù–µ –≤—ã–±—Ä–∞–Ω—ã']))}\n"
            f"- –†–∞–∑–º–µ—Ä –∫–æ–º–ø–∞–Ω–∏–∏: {', '.join(match_params.get('team_size_lst', ['–ù–µ –≤—ã–±—Ä–∞–Ω']))}"
        )
        keyboard = get_lunch_confirm_keyboard()
        await safe_edit_text(callback_query.message,
            f"{summary}\n\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–ø–∏—Å—å –Ω–∞ –æ–±–µ–¥ —Å —ç—Ç–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:",
            reply_markup=keyboard
        )
        await state.set_state(MainMenu.lunch_confirmation)
    else:
        if company_size in sizes:
            sizes.remove(company_size)
        else:
            sizes.append(company_size)
        custom_lunch_data['team_size_lst'] = sizes
        await state.update_data(custom_lunch_data=custom_lunch_data)
        keyboard = get_lunch_company_keyboard(sizes)
        await safe_edit_text(callback_query.message,
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∫–æ–º–ø–∞–Ω–∏–∏ –¥–ª—è –æ–±–µ–¥–∞ —Å–µ–≥–æ–¥–Ω—è:",
            reply_markup=keyboard
        )
    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –æ–±–µ–¥
async def process_lunch_confirmation(callback_query: CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id
    username = callback_query.from_user.username or f"user{user_id}"
    logging.info(f'[DEBUG] process_lunch_confirmation start for {username}')
    choice = callback_query.data.split(':')[1]
    logging.info(f'[DEBUG] process_lunch_confirmation: choice={choice} –¥–ª—è {username}')
    
    if choice == "yes":
        logging.info(f'[DEBUG] process_lunch_confirmation: –≤–Ω—É—Ç—Ä–∏ if choice==yes –¥–ª—è {username}')
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ
        data = await state.get_data()
        logging.info(f'[DEBUG] process_lunch_confirmation: –ø–æ–ª—É—á–∏–ª state.get_data –¥–ª—è {username}')
        custom_lunch_data = data.get('custom_lunch_data', {})
        
        user_id = callback_query.from_user.id
        username = callback_query.from_user.username or f"user{user_id}"
        user_data = get_user_data(user_id)
        
        if user_data:
            # –ë–µ—Ä–µ–º –±–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è
            match_params = convert_to_match_format(user_data, username)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Ö –∫–∞—Å—Ç–æ–º–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
            if 'time_slots' in custom_lunch_data:
                match_params['time_slots'] = custom_lunch_data['time_slots']
            if 'favourite_places' in custom_lunch_data:
                match_params['favourite_places'] = custom_lunch_data['favourite_places']
            if 'team_size_lst' in custom_lunch_data:
                match_params['team_size_lst'] = custom_lunch_data['team_size_lst']
            if 'max_lunch_duration' in custom_lunch_data:
                match_params['max_lunch_duration'] = custom_lunch_data['max_lunch_duration']
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –º–∞—Ç—á–∏–Ω–≥–∞
            update_user_to_match(username, match_params)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º matcher.py –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            output_file = os.path.join("data", "output.json")
            try:
                logging.info(f'[DEBUG] about to call run_matcher_and_get_result for {username}')
                group = run_matcher_and_get_result(
                    username,
                    USERS_TO_MATCH_JSON,
                    PLACES_CSV,
                    output_file
                )
                logging.info(f'[DEBUG] run_matcher_and_get_result —É—Å–ø–µ—à–Ω–æ –≤—ã–∑–≤–∞–Ω –¥–ª—è {username}')
                if group:
                    if group["lunch_time"] and group["place"]:
                        partners = [p for p in group["participants"] if p != username]
                        partners_str = ", ".join(partners) if partners else "–í—ã –æ–±–µ–¥–∞–µ—Ç–µ –≤ –æ–¥–∏–Ω–æ—á–∫—É."
                        lunch_time = f"{group['lunch_time'][0]}‚Äì{group['lunch_time'][1]}"
                        place = group["place"]
                        maps_link = group.get("maps_link", "")
                        msg = (
                            f"üçΩ –í–∞—à –æ–±–µ–¥:\n"
                            f"–í—Ä–µ–º—è: {lunch_time}\n"
                            f"–ú–µ—Å—Ç–æ: {place}\n"
                            f"–°—Å—ã–ª–∫–∞: {maps_link}\n"
                            f"–ü–∞—Ä—Ç–Ω–µ—Ä—ã: {partners_str}"
                        )
                    else:
                        # --- –î–û–ë–ê–í–õ–ï–ù–û: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ –æ–±–µ–¥–∞ ---
                        user_data_check = get_user_data(user_id)
                        if user_data_check and user_data_check.get('company_size') == ['1']:
                            msg = "–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ –æ–±–µ–¥ –≤ –æ–¥–∏–Ω–æ—á–∫—É! –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∞–ø–ø–µ—Ç–∏—Ç–∞ :)"
                        else:
                            msg = "–ü–æ–∫–∞ —á—Ç–æ –º—ã –Ω–µ —Å–º–æ–≥–ª–∏ –ø–æ–¥–æ–±—Ä–∞—Ç—å –≤–∞–º –ø–∞—Ä—É –∏–ª–∏ –∫–æ–º–ø–∞–Ω–∏—é –¥–ª—è –æ–±–µ–¥–∞, –Ω–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ–¥–±–µ—Ä—ë–º!"
                else:
                    msg = "–ü–æ–∫–∞ —á—Ç–æ –º—ã –Ω–µ —Å–º–æ–≥–ª–∏ –ø–æ–¥–æ–±—Ä–∞—Ç—å –≤–∞–º –ø–∞—Ä—É –∏–ª–∏ –∫–æ–º–ø–∞–Ω–∏—é –¥–ª—è –æ–±–µ–¥–∞, –Ω–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ–¥–±–µ—Ä—ë–º!"
                await callback_query.message.answer(msg)
                logging.info(f'[DEBUG] —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è {username}')
                await notify_all_new_groups(callback_query.bot, output_file)
                logging.info(f'[DEBUG] notify_all_new_groups –≤—ã–∑–≤–∞–Ω –¥–ª—è {username}')
            except Exception as e:
                logging.error(f'[DEBUG] Exception in process_lunch_confirmation for {username}: {e}')
                await callback_query.message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–±–æ—Ä–µ –∫–æ–º–ø–∞–Ω–∏–∏ –¥–ª—è –æ–±–µ–¥–∞: {e}")
            
            await safe_edit_text(callback_query.message,
                "–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ –æ–±–µ–¥! –ú—ã –æ–ø–æ–≤–µ—Å—Ç–∏–º –≤–∞—Å –æ –Ω–∞–π–¥–µ–Ω–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
                reply_markup=get_back_to_menu_keyboard()
            )
        else:
            await safe_edit_text(callback_query.message,
                "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∫–µ—Ç—É —Å–Ω–∞—á–∞–ª–∞.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É", callback_data="menu:create_profile")]
                ])
            )
    else:
        logging.info(f'[DEBUG] process_lunch_confirmation: –≤–Ω—É—Ç—Ä–∏ else –¥–ª—è {username}')
        # –û—Ç–º–µ–Ω–∞ –∏ –≤–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await safe_edit_text(callback_query.message,
            "–ó–∞–ø–∏—Å—å –Ω–∞ –æ–±–µ–¥ –æ—Ç–º–µ–Ω–µ–Ω–∞.",
            reply_markup=get_back_to_menu_keyboard()
        )
    
    await state.set_state(MainMenu.main)
    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
async def process_edit_field(callback_query: CallbackQuery, state: FSMContext):
    field = callback_query.data.split(':')[1]
    
    if field == "office":
        # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ñ–∏—Å–∞
        keyboard = get_office_keyboard()
        
        await safe_edit_text(callback_query.message,
            "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –æ—Ñ–∏—Å:",
            reply_markup=keyboard
        )
        
        await state.set_state(Form.office)
    
    elif field == "time_slots":
        # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤
        # –°–Ω–∞—á–∞–ª–∞ –æ—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–ª–æ—Ç—ã
        await state.update_data(time_slots=[])
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞
        keyboard = get_time_start_keyboard()
        
        await safe_edit_text(callback_query.message,
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—á–∞–ª–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Å–ª–æ—Ç–∞ –¥–ª—è –æ–±–µ–¥–∞:",
            reply_markup=keyboard
        )
        
        await state.set_state(Form.select_time_start)
    
    elif field == "duration":
        # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –æ–±–µ–¥–∞
        keyboard = get_lunch_duration_keyboard()
        
        await safe_edit_text(callback_query.message,
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—É—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–±–µ–¥–∞:",
            reply_markup=keyboard
        )
        
        await state.set_state(Form.lunch_duration)
    
    elif field == "favorite_places":
        # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª—é–±–∏–º—ã—Ö –º–µ—Å—Ç
        user_id = callback_query.from_user.id
        user_data = get_user_data(user_id)
        office = user_data.get('office') if user_data else None
        favorite_places = user_data.get('favorite_places', []) if user_data else []
        
        if office:
            places_for_office = get_places_for_office(office)
            
            keyboard = get_favorite_places_keyboard(places_for_office, favorite_places)
            
            await safe_edit_text(callback_query.message,
                "–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—Ç–∞, –∫–æ—Ç–æ—Ä—ã–µ –≤–∞–º –Ω—Ä–∞–≤—è—Ç—Å—è:",
                reply_markup=keyboard
            )
            
            await state.set_state(Form.favorite_places)
        else:
            await safe_edit_text(callback_query.message,
                "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –æ—Ñ–∏—Å.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="–í—ã–±—Ä–∞—Ç—å –æ—Ñ–∏—Å", callback_data="edit:office")]
                ])
            )
    
    elif field == "disliked_places":
        # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–ª—é–±–∏–º—ã—Ö –º–µ—Å—Ç
        user_id = callback_query.from_user.id
        user_data = get_user_data(user_id)
        office = user_data.get('office') if user_data else None
        disliked_places = user_data.get('disliked_places', []) if user_data else []
        
        if office:
            places_for_office = get_places_for_office(office)
            
            keyboard = get_disliked_places_keyboard(places_for_office, disliked_places)
            
            await safe_edit_text(callback_query.message,
                "–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—Ç–∞, –∫–æ—Ç–æ—Ä—ã–µ –≤–∞–º –Ω–µ –Ω—Ä–∞–≤—è—Ç—Å—è:",
                reply_markup=keyboard
            )
            
            await state.set_state(Form.disliked_places)
        else:
            await safe_edit_text(callback_query.message,
                "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –æ—Ñ–∏—Å.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="–í—ã–±—Ä–∞—Ç—å –æ—Ñ–∏—Å", callback_data="edit:office")]
                ])
            )
    
    elif field == "company_size":
        # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –∫–æ–º–ø–∞–Ω–∏–∏
        user_id = callback_query.from_user.id
        username = callback_query.from_user.username or f"user{user_id}"
        user_data = get_user_data(user_id)
        company_size = user_data.get('company_size', []) if user_data else []
        
        keyboard = get_company_size_keyboard(company_size)
        
        await safe_edit_text(callback_query.message,
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∫–æ–º–ø–∞–Ω–∏–∏ –¥–ª—è –æ–±–µ–¥–∞:",
            reply_markup=keyboard
        )
        
        await state.set_state(Form.company_size)
    
    elif field == "back":
        # –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        user_id = callback_query.from_user.id
        user_data = get_user_data(user_id)
        
        await show_main_menu(callback_query.message, user_data)
        await state.set_state(MainMenu.main)
    
    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –æ—Ñ–∏—Å–∞
async def process_office(callback_query: CallbackQuery, state: FSMContext):
    office = callback_query.data.split(':')[1]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –æ—Ñ–∏—Å–∞
    await state.update_data(office=office)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç—Ç–æ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
    current_state = await state.get_state()
    
    if current_state == Form.office.state:
        # –≠—Ç–æ –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ —Å–ª–æ—Ç–æ–≤
        await state.update_data(time_slots=[])
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞
        keyboard = get_time_start_keyboard()
        
        await safe_edit_text(callback_query.message,
            f"–û—Ç–ª–∏—á–Ω–æ! –í—ã –≤—ã–±—Ä–∞–ª–∏ –æ—Ñ–∏—Å: {office}\n\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—á–∞–ª–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Å–ª–æ—Ç–∞ –¥–ª—è –æ–±–µ–¥–∞:",
            reply_markup=keyboard
        )
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
        await state.set_state(Form.select_time_start)
    else:
        # –≠—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        user_id = callback_query.from_user.id
        username = callback_query.from_user.username or f"user{user_id}"
        user_data = get_user_data(user_id) or {}
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ñ–∏—Å
        user_data['office'] = office
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        save_user_data(user_id, username, user_data)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
        keyboard = get_after_edit_keyboard()
        
        await safe_edit_text(callback_query.message,
            f"–û—Ñ–∏—Å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞: {office}",
            reply_markup=keyboard
        )
        
        await state.set_state(MainMenu.main)
    
    await callback_query.answer()

# --- –ò—Å–ø—Ä–∞–≤–∏—Ç—å –≤—ã–∑–æ–≤—ã –∫–ª–∞–≤–∏–∞—Ç—É—Ä –¥–ª—è –æ–±—ã—á–Ω–æ–π –∞–Ω–∫–µ—Ç—ã ---
async def process_time_start(callback_query: CallbackQuery, state: FSMContext):
    start_time = callback_query.data.split(':', 1)[1]
    logger.info(f"[DEBUG] –í—ã–±—Ä–∞–Ω–æ –Ω–∞—á–∞–ª–æ —Å–ª–æ—Ç–∞: {start_time}")
    await state.update_data(current_start_time=start_time)
    keyboard = get_time_end_keyboard(start_time)
    await safe_edit_text(callback_query.message,
        f"–í—ã–±—Ä–∞–Ω–æ –Ω–∞—á–∞–ª–æ: {start_time}\n\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω–µ—Ü –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Å–ª–æ—Ç–∞:",
        reply_markup=keyboard
    )
    await state.set_state(Form.select_time_end)
    await callback_query.answer()

async def process_time_end(callback_query: CallbackQuery, state: FSMContext):
    end_time = callback_query.data.split(':', 1)[1]
    data = await state.get_data()
    start_time = data.get('current_start_time')
    logger.info(f"[DEBUG] –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞: start_time={start_time}, end_time={end_time}")
    time_slots = data.get('time_slots', [])
    if is_valid_time_interval(start_time, end_time):
        time_slots.append([start_time, end_time])
        await state.update_data(time_slots=time_slots)
        keyboard = get_add_slot_keyboard()
        await safe_edit_text(callback_query.message,
            f"–î–æ–±–∞–≤–ª–µ–Ω —Å–ª–æ—Ç: {start_time} - {end_time}\n–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –æ–¥–∏–Ω –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Å–ª–æ—Ç?",
            reply_markup=keyboard
        )
        await state.set_state(Form.add_more_slots)
    else:
        keyboard = get_time_start_keyboard()
        await safe_edit_text(callback_query.message,
            "–û—à–∏–±–∫–∞: –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–∑–∂–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—á–∞–ª–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Å–ª–æ—Ç–∞:",
            reply_markup=keyboard
        )
        await state.set_state(Form.select_time_start)
    await callback_query.answer()

async def process_add_more_slots(callback_query: CallbackQuery, state: FSMContext):
    choice = callback_query.data.split(':')[1]
    if choice == "yes":
        keyboard = get_time_start_keyboard()
        await safe_edit_text(callback_query.message,
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—á–∞–ª–æ –Ω–æ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Å–ª–æ—Ç–∞:",
            reply_markup=keyboard
        )
        await state.set_state(Form.select_time_start)
    else:
        user_id = callback_query.from_user.id
        user_data = get_user_data(user_id)
        if user_data:
            data = await state.get_data()
            time_slots = data.get('time_slots', [])
            user_data['time_slots'] = time_slots
            username = callback_query.from_user.username or f"user{user_id}"
            save_user_data(user_id, username, user_data)
            keyboard = get_after_edit_keyboard()
            await safe_edit_text(callback_query.message,
                "–í—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.",
                reply_markup=keyboard
            )
            await state.set_state(MainMenu.main)
        else:
            keyboard = get_duration_keyboard()
            await safe_edit_text(callback_query.message,
                "–ü–æ–Ω—è–ª. –ö–∞–∫—É—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–±–µ–¥–∞ –≤—ã –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ?",
                reply_markup=keyboard
            )
            await state.set_state(Form.lunch_duration)
    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –æ–±–µ–¥–∞
async def process_lunch_duration(callback_query: CallbackQuery, state: FSMContext):
    duration = callback_query.data.split(':')[1]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    await state.update_data(lunch_duration=duration)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ –Ω–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    user_id = callback_query.from_user.id
    user_data = get_user_data(user_id)
    
    if user_data and 'time_slots' not in await state.get_data():
        # –≠—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—É—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        user_data['lunch_duration'] = duration
        username = callback_query.from_user.username or f"user{user_id}"
        save_user_data(user_id, username, user_data)
        # --- –ó–∞–ø—É—Å–∫ matcher.py –∏ —Ä–∞—Å—Å—ã–ª–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ ---
        from config import USERS_TO_MATCH_JSON, PLACES_CSV
        import os
        output_file = os.path.join("data", "output.json")
        from .utils import run_matcher_and_get_result
        match_params = convert_to_match_format(user_data, username)
        update_user_to_match(username, match_params)
        try:
            group = run_matcher_and_get_result(
                username,
                USERS_TO_MATCH_JSON,
                PLACES_CSV,
                output_file
            )
            if group and group["lunch_time"] and group["place"]:
                partners = [p for p in group["participants"] if p != username]
                partners_str = ", ".join(partners) if partners else "–í—ã –æ–±–µ–¥–∞–µ—Ç–µ –≤ –æ–¥–∏–Ω–æ—á–∫—É."
                lunch_time = f"{group['lunch_time'][0]}‚Äì{group['lunch_time'][1]}"
                place = group["place"]
                maps_link = group.get("maps_link", "")
                msg = (
                    f"üçΩ –í–∞—à –æ–±–µ–¥:\n"
                    f"–í—Ä–µ–º—è: {lunch_time}\n"
                    f"–ú–µ—Å—Ç–æ: {place}\n"
                    f"–°—Å—ã–ª–∫–∞: {maps_link}\n"
                    f"–ü–∞—Ä—Ç–Ω–µ—Ä—ã: {partners_str}"
                )
            else:
                msg = "–ü–æ–∫–∞ —á—Ç–æ –º—ã –Ω–µ —Å–º–æ–≥–ª–∏ –ø–æ–¥–æ–±—Ä–∞—Ç—å –≤–∞–º –ø–∞—Ä—É –∏–ª–∏ –∫–æ–º–ø–∞–Ω–∏—é –¥–ª—è –æ–±–µ–¥–∞, –Ω–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ–¥–±–µ—Ä—ë–º!"
            await callback_query.message.answer(msg)
            await notify_all_new_groups(callback_query.bot, output_file)
        except Exception as e:
            await callback_query.message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–±–æ—Ä–µ –∫–æ–º–ø–∞–Ω–∏–∏ –¥–ª—è –æ–±–µ–¥–∞: {e}")
        keyboard = get_after_edit_keyboard()
        await safe_edit_text(callback_query.message,
            f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–±–µ–¥–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞: {duration} –º–∏–Ω—É—Ç",
            reply_markup=keyboard
        )
        await state.set_state(MainMenu.main)
    else:
        # –≠—Ç–æ –Ω–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ñ–∏—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –º–µ—Å—Ç
        data = await state.get_data()
        office = data.get('office')
        
        # –ü–æ–ª—É—á–∞–µ–º –º–µ—Å—Ç–∞ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –æ—Ñ–∏—Å–∞
        places_for_office = get_places_for_office(office)
        favorite_places = data.get('favorite_places', [])
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –ª—é–±–∏–º—ã—Ö –º–µ—Å—Ç
        keyboard = get_favorite_places_keyboard(places_for_office, favorite_places)
        
        await safe_edit_text(callback_query.message,
            "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—Ç–∞, –∫–æ—Ç–æ—Ä—ã–µ –≤–∞–º –Ω—Ä–∞–≤—è—Ç—Å—è. –ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ. –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –Ω–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ'.",
            reply_markup=keyboard
        )
        
        await state.set_state(Form.favorite_places)
    
    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ª—é–±–∏–º—ã—Ö –º–µ—Å—Ç
async def process_favorite_places(callback_query: CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id
    username = callback_query.from_user.username or f"user{user_id}"
    choice = callback_query.data.split(':')[1]
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
    data = await state.get_data()
    office = data.get('office')
    favorite_places = data.get('favorite_places', [])
    
    if choice == "done":
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ –Ω–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        user_id = callback_query.from_user.id
        user_data = get_user_data(user_id)
        import logging
        logging.info(f'[DEBUG] user_id={user_id}, user_data={user_data} –≤ process_favorite_places')
        if user_data:
            logging.info(f'[DEBUG] –í–µ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è {username} –≤ process_favorite_places')
            # –≠—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–µ –ª—é–±–∏–º—ã–µ –º–µ—Å—Ç–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            user_data['favorite_places'] = favorite_places
            username = callback_query.from_user.username or f"user{user_id}"
            save_user_data(user_id, username, user_data)
            # --- –ó–∞–ø—É—Å–∫ matcher.py –∏ —Ä–∞—Å—Å—ã–ª–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ ---
            from config import USERS_TO_MATCH_JSON, PLACES_CSV
            import os
            output_file = os.path.join("data", "output.json")
            from .utils import run_matcher_and_get_result
            match_params = convert_to_match_format(user_data, username)
            update_user_to_match(username, match_params)
            try:
                group = run_matcher_and_get_result(
                    username,
                    USERS_TO_MATCH_JSON,
                    PLACES_CSV,
                    output_file
                )
                if group and group["lunch_time"] and group["place"]:
                    partners = [p for p in group["participants"] if p != username]
                    partners_str = ", ".join(partners) if partners else "–í—ã –æ–±–µ–¥–∞–µ—Ç–µ –≤ –æ–¥–∏–Ω–æ—á–∫—É."
                    lunch_time = f"{group['lunch_time'][0]}‚Äì{group['lunch_time'][1]}"
                    place = group["place"]
                    maps_link = group.get("maps_link", "")
                    msg = (
                        f"üçΩ –í–∞—à –æ–±–µ–¥:\n"
                        f"–í—Ä–µ–º—è: {lunch_time}\n"
                        f"–ú–µ—Å—Ç–æ: {place}\n"
                        f"–°—Å—ã–ª–∫–∞: {maps_link}\n"
                        f"–ü–∞—Ä—Ç–Ω–µ—Ä—ã: {partners_str}"
                    )
                else:
                    msg = "–ü–æ–∫–∞ —á—Ç–æ –º—ã –Ω–µ —Å–º–æ–≥–ª–∏ –ø–æ–¥–æ–±—Ä–∞—Ç—å –≤–∞–º –ø–∞—Ä—É –∏–ª–∏ –∫–æ–º–ø–∞–Ω–∏—é –¥–ª—è –æ–±–µ–¥–∞, –Ω–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ–¥–±–µ—Ä—ë–º!"
                await callback_query.message.answer(msg)
                await notify_all_new_groups(callback_query.bot, output_file)
            except Exception as e:
                await callback_query.message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–±–æ—Ä–µ –∫–æ–º–ø–∞–Ω–∏–∏ –¥–ª—è –æ–±–µ–¥–∞: {e}")
            keyboard = get_after_edit_keyboard()
            await safe_edit_text(callback_query.message,
                "–õ—é–±–∏–º—ã–µ –º–µ—Å—Ç–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.",
                reply_markup=keyboard
            )
            await state.set_state(MainMenu.main)
        else:
            # –≠—Ç–æ –Ω–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å –∏–ª–∏ –ø–æ–ª–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
            # –ü–æ–ª—É—á–∞–µ–º –º–µ—Å—Ç–∞ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –æ—Ñ–∏—Å–∞
            places_for_office = get_places_for_office(office)
            disliked_places = data.get('disliked_places', [])
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –Ω–µ–ª—é–±–∏–º—ã—Ö –º–µ—Å—Ç
            keyboard = get_disliked_places_keyboard(places_for_office, disliked_places)
            
            await safe_edit_text(callback_query.message,
                "–ê —Ç–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—Ç–∞, –∫–æ—Ç–æ—Ä—ã–µ –≤–∞–º –Ω–µ –Ω—Ä–∞–≤—è—Ç—Å—è (—á—Ç–æ–±—ã –º—ã –∏—Ö –∏–∑–±–µ–≥–∞–ª–∏):",
                reply_markup=keyboard
            )
            
            await state.set_state(Form.disliked_places)
    else:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ª—é–±–∏–º—ã—Ö –º–µ—Å—Ç
        if choice in favorite_places:
            favorite_places.remove(choice)
        else:
            favorite_places.append(choice)
        
        await state.update_data(favorite_places=favorite_places)
        
        # –ü–æ–ª—É—á–∞–µ–º –º–µ—Å—Ç–∞ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –æ—Ñ–∏—Å–∞ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        places_for_office = get_places_for_office(office)
        keyboard = get_favorite_places_keyboard(places_for_office, favorite_places)
        
        await safe_edit_text(callback_query.message,
            "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—Ç–∞, –∫–æ—Ç–æ—Ä—ã–µ –≤–∞–º –Ω—Ä–∞–≤—è—Ç—Å—è. –ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ. –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –Ω–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ'.",
            reply_markup=keyboard
        )
    
    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –Ω–µ–ª—é–±–∏–º—ã—Ö –º–µ—Å—Ç
async def process_disliked_places(callback_query: CallbackQuery, state: FSMContext):
    choice = callback_query.data.split(':')[1]
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
    data = await state.get_data()
    office = data.get('office')
    disliked_places = data.get('disliked_places', [])
    
    if choice == "done":
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ –Ω–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        user_id = callback_query.from_user.id
        user_data = get_user_data(user_id)
        import logging
        logging.info(f'[DEBUG] user_id={user_id}, user_data={user_data} –≤ process_disliked_places')
        if user_data:
            logging.info(f'[DEBUG] –í–µ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è {username} –≤ process_disliked_places')
            # –≠—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–µ –Ω–µ–ª—é–±–∏–º—ã–µ –º–µ—Å—Ç–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            user_data['disliked_places'] = disliked_places
            username = callback_query.from_user.username or f"user{user_id}"
            
            save_user_data(user_id, username, user_data)
            
            # --- –ó–∞–ø—É—Å–∫ matcher.py –∏ —Ä–∞—Å—Å—ã–ª–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ ---
            from config import USERS_TO_MATCH_JSON, PLACES_CSV
            import os
            output_file = os.path.join("data", "output.json")
            from .utils import run_matcher_and_get_result
            match_params = convert_to_match_format(user_data, username)
            update_user_to_match(username, match_params)
            try:
                group = run_matcher_and_get_result(
                    username,
                    USERS_TO_MATCH_JSON,
                    PLACES_CSV,
                    output_file
                )
                if group and group["lunch_time"] and group["place"]:
                    partners = [p for p in group["participants"] if p != username]
                    partners_str = ", ".join(partners) if partners else "–í—ã –æ–±–µ–¥–∞–µ—Ç–µ –≤ –æ–¥–∏–Ω–æ—á–∫—É."
                    lunch_time = f"{group['lunch_time'][0]}‚Äì{group['lunch_time'][1]}"
                    place = group["place"]
                    maps_link = group.get("maps_link", "")
                    msg = (
                        f"üçΩ –í–∞—à –æ–±–µ–¥:\n"
                        f"–í—Ä–µ–º—è: {lunch_time}\n"
                        f"–ú–µ—Å—Ç–æ: {place}\n"
                        f"–°—Å—ã–ª–∫–∞: {maps_link}\n"
                        f"–ü–∞—Ä—Ç–Ω–µ—Ä—ã: {partners_str}"
                    )
                else:
                    msg = "–ü–æ–∫–∞ —á—Ç–æ –º—ã –Ω–µ —Å–º–æ–≥–ª–∏ –ø–æ–¥–æ–±—Ä–∞—Ç—å –≤–∞–º –ø–∞—Ä—É –∏–ª–∏ –∫–æ–º–ø–∞–Ω–∏—é –¥–ª—è –æ–±–µ–¥–∞, –Ω–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ–¥–±–µ—Ä—ë–º!"
                await callback_query.message.answer(msg)
                await notify_all_new_groups(callback_query.bot, output_file)
            except Exception as e:
                await callback_query.message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–±–æ—Ä–µ –∫–æ–º–ø–∞–Ω–∏–∏ –¥–ª—è –æ–±–µ–¥–∞: {e}")
            keyboard = get_after_edit_keyboard()
            await safe_edit_text(callback_query.message,
                "–ù–µ–ª—é–±–∏–º—ã–µ –º–µ—Å—Ç–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.",
                reply_markup=keyboard
            )
            await state.set_state(MainMenu.main)
        else:
            # –≠—Ç–æ –Ω–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å –∏–ª–∏ –ø–æ–ª–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–∞–∑–º–µ—Ä–∞ –∫–æ–º–ø–∞–Ω–∏–∏
            company_size = data.get('company_size', [])
            keyboard = get_company_size_keyboard(company_size)
            
            await safe_edit_text(callback_query.message,
                "–ü–æ—á—Ç–∏ –≥–æ—Ç–æ–≤–æ! –£–∫–∞–∂–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–π —Ä–∞–∑–º–µ—Ä –∫–æ–º–ø–∞–Ω–∏–∏ –¥–ª—è –æ–±–µ–¥–∞ (–º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ):",
                reply_markup=keyboard
            )
            
            await state.set_state(Form.company_size)
    else:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –Ω–µ–ª—é–±–∏–º—ã—Ö –º–µ—Å—Ç
        if choice in disliked_places:
            disliked_places.remove(choice)
        else:
            disliked_places.append(choice)
        
        await state.update_data(disliked_places=disliked_places)
        
        # –ü–æ–ª—É—á–∞–µ–º –º–µ—Å—Ç–∞ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –æ—Ñ–∏—Å–∞ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        places_for_office = get_places_for_office(office)
        keyboard = get_disliked_places_keyboard(places_for_office, disliked_places)
        
        await safe_edit_text(callback_query.message,
            "–ê —Ç–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—Ç–∞, –∫–æ—Ç–æ—Ä—ã–µ –≤–∞–º –Ω–µ –Ω—Ä–∞–≤—è—Ç—Å—è (—á—Ç–æ–±—ã –º—ã –∏—Ö –∏–∑–±–µ–≥–∞–ª–∏):",
            reply_markup=keyboard
        )
    
    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ä–∞–∑–º–µ—Ä–∞ –∫–æ–º–ø–∞–Ω–∏–∏
async def process_company_size(callback_query: CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id
    username = callback_query.from_user.username or f"user{user_id}"
    choice = callback_query.data.split(':')[1]
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
    data = await state.get_data()
    company_size = data.get('company_size', [])
    
    if choice == "done":
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ –Ω–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        user_id = callback_query.from_user.id
        user_data = get_user_data(user_id)
        import logging
        logging.info(f'[DEBUG] user_id={user_id}, user_data={user_data} –≤ process_company_size')
        if user_data:
            logging.info(f'[DEBUG] –í–µ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è {username} –≤ process_company_size')
            # –≠—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä –∫–æ–º–ø–∞–Ω–∏–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            user_data['company_size'] = company_size
            username = callback_query.from_user.username or f"user{user_id}"
            
            save_user_data(user_id, username, user_data)
            
            # --- –ó–∞–ø—É—Å–∫ matcher.py –∏ —Ä–∞—Å—Å—ã–ª–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ ---
            from config import USERS_TO_MATCH_JSON, PLACES_CSV
            import os
            output_file = os.path.join("data", "output.json")
            from .utils import run_matcher_and_get_result
            match_params = convert_to_match_format(user_data, username)
            update_user_to_match(username, match_params)
            try:
                group = run_matcher_and_get_result(
                    username,
                    USERS_TO_MATCH_JSON,
                    PLACES_CSV,
                    output_file
                )
                if group and group["lunch_time"] and group["place"]:
                    partners = [p for p in group["participants"] if p != username]
                    partners_str = ", ".join(partners) if partners else "–í—ã –æ–±–µ–¥–∞–µ—Ç–µ –≤ –æ–¥–∏–Ω–æ—á–∫—É."
                    lunch_time = f"{group['lunch_time'][0]}‚Äì{group['lunch_time'][1]}"
                    place = group["place"]
                    maps_link = group.get("maps_link", "")
                    msg = (
                        f"üçΩ –í–∞—à –æ–±–µ–¥:\n"
                        f"–í—Ä–µ–º—è: {lunch_time}\n"
                        f"–ú–µ—Å—Ç–æ: {place}\n"
                        f"–°—Å—ã–ª–∫–∞: {maps_link}\n"
                        f"–ü–∞—Ä—Ç–Ω–µ—Ä—ã: {partners_str}"
                    )
                else:
                    msg = "–ü–æ–∫–∞ —á—Ç–æ –º—ã –Ω–µ —Å–º–æ–≥–ª–∏ –ø–æ–¥–æ–±—Ä–∞—Ç—å –≤–∞–º –ø–∞—Ä—É –∏–ª–∏ –∫–æ–º–ø–∞–Ω–∏—é –¥–ª—è –æ–±–µ–¥–∞, –Ω–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ–¥–±–µ—Ä—ë–º!"
                await callback_query.message.answer(msg)
                await notify_all_new_groups(callback_query.bot, output_file)
            except Exception as e:
                await callback_query.message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–±–æ—Ä–µ –∫–æ–º–ø–∞–Ω–∏–∏ –¥–ª—è –æ–±–µ–¥–∞: {e}")
            keyboard = get_after_edit_keyboard()
            await safe_edit_text(callback_query.message,
                "–†–∞–∑–º–µ—Ä –∫–æ–º–ø–∞–Ω–∏–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω.",
                reply_markup=keyboard
            )
            await state.set_state(MainMenu.main)
        else:
            # –≠—Ç–æ –Ω–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å –∏–ª–∏ –ø–æ–ª–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ - —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å–≤–æ–¥–∫—É –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é
            time_slots_formatted = ", ".join([f"{start}-{end}" for start, end in data.get('time_slots', [])])
            
            summary = (
                "–î–∞–≤–∞–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏–º –≤–∞—à—É –∞–Ω–∫–µ—Ç—É:\n"
                f"- –û—Ñ–∏—Å: {data.get('office', '–ù–µ –≤—ã–±—Ä–∞–Ω')}\n"
                f"- –°–ª–æ—Ç—ã –≤—Ä–µ–º–µ–Ω–∏: {time_slots_formatted}\n"
                f"- –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–±–µ–¥–∞: {data.get('lunch_duration', '–ù–µ –≤—ã–±—Ä–∞–Ω–∞')} –º–∏–Ω—É—Ç\n"
                f"- –õ—é–±–∏–º—ã–µ –º–µ—Å—Ç–∞: {', '.join(data.get('favorite_places', ['–ù–µ –≤—ã–±—Ä–∞–Ω—ã']))}\n"
                f"- –ù–µ–ª—é–±–∏–º—ã–µ –º–µ—Å—Ç–∞: {', '.join(data.get('disliked_places', ['–ù–µ –≤—ã–±—Ä–∞–Ω—ã']))}\n"
                f"- –†–∞–∑–º–µ—Ä –∫–æ–º–ø–∞–Ω–∏–∏: {', '.join(data.get('company_size', ['–ù–µ –≤—ã–±—Ä–∞–Ω']))}"
            )
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            keyboard = get_confirmation_keyboard()
            
            await safe_edit_text(callback_query.message,
                summary,
                reply_markup=keyboard
            )
            
            await state.set_state(Form.confirmation)
    else:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ä–∞–∑–º–µ—Ä–æ–≤ –∫–æ–º–ø–∞–Ω–∏–∏
        if choice in company_size:
            company_size.remove(choice)
        else:
            company_size.append(choice)
        
        await state.update_data(company_size=company_size)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = get_company_size_keyboard(company_size)
        
        await safe_edit_text(callback_query.message,
            "–ü–æ—á—Ç–∏ –≥–æ—Ç–æ–≤–æ! –£–∫–∞–∂–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–π —Ä–∞–∑–º–µ—Ä –∫–æ–º–ø–∞–Ω–∏–∏ –¥–ª—è –æ–±–µ–¥–∞ (–º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ):",
            reply_markup=keyboard
        )
    
    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã
async def process_confirmation(callback_query: CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id
    username = callback_query.from_user.username or f"user{user_id}"
    logging.info(f'[DEBUG] process_confirmation start for {username}')
    choice = callback_query.data.split(':')[1]
    logging.info(f'[DEBUG] process_confirmation: choice={choice} –¥–ª—è {username}')
    if choice == "yes":
        logging.info(f'[DEBUG] process_confirmation: –≤–Ω—É—Ç—Ä–∏ if choice==yes –¥–ª—è {username}')
        data = await state.get_data()
        logging.info(f'[DEBUG] process_confirmation: –ø–æ–ª—É—á–∏–ª state.get_data –¥–ª—è {username}')
        if not data.get('favorite_places'):
            data['favorite_places'] = []
        if not data.get('disliked_places'):
            data['disliked_places'] = []
        if not data.get('company_size'):
            data['company_size'] = []
        save_user_data(user_id, username, data)
        logging.info(f'[DEBUG] –ø–æ—Å–ª–µ save_user_data –¥–ª—è {username}')
        match_params = convert_to_match_format(data, username)
        update_user_to_match(username, match_params)
        logging.info(f'[DEBUG] –ø–æ—Å–ª–µ update_user_to_match –¥–ª—è {username}')
        output_file = os.path.join("data", "output.json")
        try:
            logging.info(f'[DEBUG] about to call run_matcher_and_get_result for {username}')
            group = run_matcher_and_get_result(
                username,
                USERS_TO_MATCH_JSON,
                PLACES_CSV,
                output_file
            )
            logging.info(f'[DEBUG] run_matcher_and_get_result —É—Å–ø–µ—à–Ω–æ –≤—ã–∑–≤–∞–Ω –¥–ª—è {username}')
            if group:
                if group["lunch_time"] and group["place"]:
                    partners = [p for p in group["participants"] if p != username]
                    partners_str = ", ".join(partners) if partners else "–í—ã –æ–±–µ–¥–∞–µ—Ç–µ –≤ –æ–¥–∏–Ω–æ—á–∫—É."
                    lunch_time = f"{group['lunch_time'][0]}‚Äì{group['lunch_time'][1]}"
                    place = group["place"]
                    maps_link = group.get("maps_link", "")
                    msg = (
                        f"üçΩ –í–∞—à –æ–±–µ–¥:\n"
                        f"–í—Ä–µ–º—è: {lunch_time}\n"
                        f"–ú–µ—Å—Ç–æ: {place}\n"
                        f"–°—Å—ã–ª–∫–∞: {maps_link}\n"
                        f"–ü–∞—Ä—Ç–Ω–µ—Ä—ã: {partners_str}"
                    )
                else:
                    msg = "–ü–æ–∫–∞ —á—Ç–æ –º—ã –Ω–µ —Å–º–æ–≥–ª–∏ –ø–æ–¥–æ–±—Ä–∞—Ç—å –≤–∞–º –ø–∞—Ä—É –∏–ª–∏ –∫–æ–º–ø–∞–Ω–∏—é –¥–ª—è –æ–±–µ–¥–∞, –Ω–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ–¥–±–µ—Ä—ë–º!"
            else:
                msg = "–ü–æ–∫–∞ —á—Ç–æ –º—ã –Ω–µ —Å–º–æ–≥–ª–∏ –ø–æ–¥–æ–±—Ä–∞—Ç—å –≤–∞–º –ø–∞—Ä—É –∏–ª–∏ –∫–æ–º–ø–∞–Ω–∏—é –¥–ª—è –æ–±–µ–¥–∞, –Ω–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ–¥–±–µ—Ä—ë–º!"
            await callback_query.message.answer(msg)
            logging.info(f'[DEBUG] —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è {username}')
            await notify_all_new_groups(callback_query.bot, output_file)
            logging.info(f'[DEBUG] notify_all_new_groups –≤—ã–∑–≤–∞–Ω –¥–ª—è {username}')
        except Exception as e:
            logging.error(f'[DEBUG] Exception in process_confirmation for {username}: {e}')
            await callback_query.message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–±–æ—Ä–µ –∫–æ–º–ø–∞–Ω–∏–∏ –¥–ª—è –æ–±–µ–¥–∞: {e}")
        await safe_edit_text(callback_query.message,
            "–°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –æ–±–µ–¥ –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.")
        await show_main_menu(callback_query.message, data)
        await state.clear()
        await state.set_state(MainMenu.main)
    else:
        logging.info(f'[DEBUG] process_confirmation: –≤–Ω—É—Ç—Ä–∏ else –¥–ª—è {username}')
        await safe_edit_text(callback_query.message,
            "–•–æ—Ä–æ—à–æ, –¥–∞–≤–∞–π—Ç–µ –∑–∞–ø–æ–ª–Ω–∏–º –∞–Ω–∫–µ—Ç—É –∑–∞–Ω–æ–≤–æ.")
        await state.clear()
        keyboard = get_office_keyboard()
        await callback_query.message.answer(
            "–î–ª—è –Ω–∞—á–∞–ª–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –æ—Ñ–∏—Å:",
            reply_markup=keyboard
        )
        await state.set_state(Form.office)
    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –Ω–∞ —ç—Ç–∞–ø–∞—Ö –∞–Ω–∫–µ—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async def process_back_in_form(callback_query: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    current_state = await state.get_state()
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫—É–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å—Å—è
    if current_state == Form.select_time_start.state:
        # –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –æ—Ñ–∏—Å–∞
        keyboard = get_office_keyboard()
        await safe_edit_text(callback_query.message, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –æ—Ñ–∏—Å:", reply_markup=keyboard)
        await state.set_state(Form.office)
    elif current_state == Form.select_time_end.state:
        # –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –Ω–∞—á–∞–ª–∞ —Å–ª–æ—Ç–∞
        keyboard = get_time_start_keyboard()
        await safe_edit_text(callback_query.message, "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—á–∞–ª–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Å–ª–æ—Ç–∞:", reply_markup=keyboard)
        await state.set_state(Form.select_time_start)
    elif current_state == Form.add_more_slots.state:
        # –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –∫–æ–Ω—Ü–∞ —Å–ª–æ—Ç–∞
        last_slot = data.get('time_slots', [])[-1][0] if data.get('time_slots') else None
        keyboard = get_time_end_keyboard(last_slot) if last_slot else get_time_end_keyboard('11:00')
        await safe_edit_text(callback_query.message, "–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å–ª–æ—Ç–∞:", reply_markup=keyboard)
        await state.set_state(Form.select_time_end)
    elif current_state == Form.lunch_duration.state:
        # –ù–∞–∑–∞–¥ –∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é –µ—â–µ –æ–¥–Ω–æ–≥–æ —Å–ª–æ—Ç–∞
        keyboard = get_add_slot_keyboard()
        await safe_edit_text(callback_query.message, "–î–æ–±–∞–≤–∏—Ç—å –µ—â–µ –æ–¥–∏–Ω –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Å–ª–æ—Ç?", reply_markup=keyboard)
        await state.set_state(Form.add_more_slots)
    elif current_state == Form.favorite_places.state:
        # –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –Ω–µ–ª—é–±–∏–º—ã—Ö –º–µ—Å—Ç
        office = data.get('office')
        places_for_office = get_places_for_office(office)
        disliked_places = data.get('disliked_places', [])
        keyboard = get_disliked_places_keyboard(places_for_office, disliked_places)
        await safe_edit_text(callback_query.message, "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–ª—é–±–∏–º—ã–µ –º–µ—Å—Ç–∞:", reply_markup=keyboard)
        await state.set_state(Form.disliked_places)
    elif current_state == Form.company_size.state:
        # –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É —Ä–∞–∑–º–µ—Ä–∞ –∫–æ–º–ø–∞–Ω–∏–∏
        company_size = data.get('company_size', [])
        keyboard = get_company_size_keyboard(company_size)
        await safe_edit_text(callback_query.message, "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–π —Ä–∞–∑–º–µ—Ä –∫–æ–º–ø–∞–Ω–∏–∏:", reply_markup=keyboard)
        await state.set_state(Form.company_size)
    elif current_state == Form.confirmation.state:
        # –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É —Ä–∞–∑–º–µ—Ä–∞ –∫–æ–º–ø–∞–Ω–∏–∏
        company_size = data.get('company_size', [])
        keyboard = get_company_size_keyboard(company_size)
        await safe_edit_text(callback_query.message, "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–π —Ä–∞–∑–º–µ—Ä –∫–æ–º–ø–∞–Ω–∏–∏:", reply_markup=keyboard)
        await state.set_state(Form.company_size)
    else:
        await callback_query.message.answer("–í–æ–∑–≤—Ä–∞—Ç –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω –Ω–∞ —ç—Ç–æ–º —ç—Ç–∞–ø–µ.")
    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –¥–ª—è custom lunch
async def process_back_in_custom_lunch(callback_query: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    current_state = await state.get_state()
    custom_lunch_data = data.get('custom_lunch_data', {})
    if current_state == MainMenu.lunch_office.state:
        # –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∑–∞–ø–∏—Å–∏
        keyboard = get_lunch_preference_keyboard()
        await safe_edit_text(callback_query.message, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –∑–∞–ø–∏—Å–∏ –Ω–∞ –æ–±–µ–¥:", reply_markup=keyboard)
        await state.set_state(MainMenu.lunch_preference)
    elif current_state == MainMenu.lunch_time_start.state:
        # –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –æ—Ñ–∏—Å–∞
        keyboard = get_office_keyboard()
        await safe_edit_text(callback_query.message, "–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ñ–∏—Å:", reply_markup=keyboard)
        await state.set_state(MainMenu.lunch_office)
    elif current_state == MainMenu.lunch_time_end.state:
        # –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞
        keyboard = get_lunch_time_start_keyboard()
        await safe_edit_text(callback_query.message, "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—á–∞–ª–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Å–ª–æ—Ç–∞:", reply_markup=keyboard)
        await state.set_state(MainMenu.lunch_time_start)
    elif current_state == MainMenu.lunch_time_add_more.state:
        # –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –≤—Ä–µ–º–µ–Ω–∏ –∫–æ–Ω—Ü–∞
        last_slot = custom_lunch_data.get('time_slots', [])[-1][0] if custom_lunch_data.get('time_slots') else None
        keyboard = get_lunch_time_end_keyboard(last_slot) if last_slot else get_lunch_time_end_keyboard('11:00')
        await safe_edit_text(callback_query.message, "–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å–ª–æ—Ç–∞:", reply_markup=keyboard)
        await state.set_state(MainMenu.lunch_time_end)
    elif current_state == MainMenu.lunch_duration.state:
        # –ù–∞–∑–∞–¥ –∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é –µ—â–µ –æ–¥–Ω–æ–≥–æ —Å–ª–æ—Ç–∞
        keyboard = get_lunch_duration_keyboard()
        await safe_edit_text(callback_query.message, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–±–µ–¥–∞:", reply_markup=keyboard)
        await state.set_state(MainMenu.lunch_duration)
    elif current_state == MainMenu.lunch_place.state:
        # –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –ª—é–±–∏–º—ã—Ö –º–µ—Å—Ç
        office = custom_lunch_data.get('office')
        places_for_office = get_places_for_office(office)
        fav_places = custom_lunch_data.get('favourite_places', [])
        keyboard = get_lunch_favorite_places_keyboard(places_for_office, fav_places)
        await safe_edit_text(callback_query.message, "–í—ã–±–µ—Ä–∏—Ç–µ –ª—é–±–∏–º—ã–µ –º–µ—Å—Ç–∞:", reply_markup=keyboard)
        await state.set_state(MainMenu.lunch_place)
    elif current_state == MainMenu.lunch_company_size.state:
        # –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É —Ä–∞–∑–º–µ—Ä–∞ –∫–æ–º–ø–∞–Ω–∏–∏
        sizes = custom_lunch_data.get('team_size_lst', [])
        keyboard = get_lunch_company_keyboard(sizes)
        await safe_edit_text(callback_query.message, "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–π —Ä–∞–∑–º–µ—Ä –∫–æ–º–ø–∞–Ω–∏–∏:", reply_markup=keyboard)
        await state.set_state(MainMenu.lunch_company_size)
    elif current_state == MainMenu.lunch_confirmation.state:
        # –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É —Ä–∞–∑–º–µ—Ä–∞ –∫–æ–º–ø–∞–Ω–∏–∏
        sizes = custom_lunch_data.get('team_size_lst', [])
        keyboard = get_lunch_company_keyboard(sizes)
        await safe_edit_text(callback_query.message, "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–π —Ä–∞–∑–º–µ—Ä –∫–æ–º–ø–∞–Ω–∏–∏:", reply_markup=keyboard)
        await state.set_state(MainMenu.lunch_company_size)
    else:
        await callback_query.message.answer("–í–æ–∑–≤—Ä–∞—Ç –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω –Ω–∞ —ç—Ç–æ–º —ç—Ç–∞–ø–µ.")
    await callback_query.answer()

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
def register_all_handlers(dp):
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
    dp.message.register(cmd_start, Command("start"))
    dp.message.register(cmd_notify_groups, Command("notify_groups"))

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    dp.callback_query.register(process_main_menu, F.data.startswith("menu:"))
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –∞–Ω–∫–µ—Ç—ã
    dp.callback_query.register(process_office, F.data.startswith("office:"), Form.office)
    dp.callback_query.register(process_time_start, F.data.startswith("time_start:"), Form.select_time_start)
    dp.callback_query.register(process_time_end, F.data.startswith("time_end:"), Form.select_time_end)
    dp.callback_query.register(process_add_more_slots, F.data.startswith("add_slot:"), Form.add_more_slots)
    dp.callback_query.register(process_lunch_duration, F.data.startswith("duration:"), Form.lunch_duration)
    dp.callback_query.register(process_favorite_places, F.data.startswith("fav_place:"), Form.favorite_places)
    dp.callback_query.register(process_disliked_places, F.data.startswith("dis_place:"), Form.disliked_places)
    dp.callback_query.register(process_company_size, F.data.startswith("size:"), Form.company_size)
    dp.callback_query.register(process_confirmation, F.data.startswith("confirm:"), Form.confirmation)
    dp.callback_query.register(process_back_in_form, F.data.startswith("back:"), Form.select_time_start, Form.select_time_end, Form.add_more_slots, Form.lunch_duration, Form.favorite_places, Form.disliked_places, Form.company_size, Form.confirmation)
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –æ–±–µ–¥
    dp.callback_query.register(process_lunch_preference, F.data.startswith("lunch:"), MainMenu.lunch_preference)
    dp.callback_query.register(process_lunch_office, F.data.startswith("office:"), MainMenu.lunch_office)
    dp.callback_query.register(process_lunch_time_start, F.data.startswith("lunch_time_start:"), MainMenu.lunch_time_start)
    dp.callback_query.register(process_lunch_time_end, F.data.startswith("lunch_time_end:"), MainMenu.lunch_time_end)
    dp.callback_query.register(process_lunch_time_add_more, F.data.startswith("add_slot:"), MainMenu.lunch_time_add_more)
    dp.callback_query.register(process_lunch_custom_duration, F.data.startswith("lunch_duration:"), MainMenu.lunch_duration)
    dp.callback_query.register(process_lunch_place, F.data.startswith("lunch_place:"), MainMenu.lunch_place)
    dp.callback_query.register(process_lunch_company, F.data.startswith("lunch_company:"), MainMenu.lunch_company_size)
    dp.callback_query.register(process_lunch_confirmation, F.data.startswith("lunch_confirm:"), MainMenu.lunch_confirmation)
    dp.callback_query.register(process_back_in_custom_lunch, F.data.startswith("back:"), MainMenu.lunch_office, MainMenu.lunch_time_start, MainMenu.lunch_time_end, MainMenu.lunch_time_add_more, MainMenu.lunch_duration, MainMenu.lunch_place, MainMenu.lunch_company_size, MainMenu.lunch_confirmation)
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
    dp.callback_query.register(process_edit_field, F.data.startswith("edit:"), MainMenu.edit_field)