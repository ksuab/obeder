# test_matcher.py

import json
import csv
import os
from datetime import time, datetime, timedelta
from matcher import match_lunch, load_places, parse_time

# –ü—É—Ç–∏ –∫ —Ç–µ—Å—Ç–æ–≤—ã–º —Ñ–∞–π–ª–∞–º
USERS_FILE = "test/users_to_match.json"
PLACES_FILE = "test/places.csv"
OUTPUT_FILE = "test/output.json"

def load_users():
    with open(USERS_FILE, "r", encoding="utf-8") as f:
        return json.load(f)

def save_result(result):
    with open(OUTPUT_FILE, "w", encoding="utf-8") as f:
        json.dump(result, f, ensure_ascii=False, indent=2)

def parse_time_str(t: str) -> time:
    return datetime.strptime(t, "%H:%M").time()

def time_diff(end: str, start: str) -> int:
    """–†–∞–∑–Ω–∏—Ü–∞ –≤ –º–∏–Ω—É—Ç–∞—Ö –º–µ–∂–¥—É –¥–≤—É–º—è –≤—Ä–µ–º–µ–Ω–∞–º–∏."""
    t_end = parse_time_str(end)
    t_start = parse_time_str(start)
    delta = timedelta(hours=t_end.hour, minutes=t_end.minute) - timedelta(hours=t_start.hour, minutes=t_start.minute)
    return int(delta.total_seconds() // 60)

def run_tests():
    print("üì• –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ...")
    users = load_users()
    print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")

    # –ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤ match_lunch
    print("üîç –ó–∞–ø—É—Å–∫–∞–µ–º –º—ç—Ç—á–∏–Ω–≥...")
    result = match_lunch(users, PLACES_FILE)
    save_result(result)
    print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ {OUTPUT_FILE}")

    # === –¢–µ—Å—Ç 1: –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
    all_logins = {u["login"] for u in users}
    matched_logins = set()
    for group in result:
        matched_logins.update(group["participants"])
    assert matched_logins == all_logins, f"‚ùå –ü—Ä–æ–ø—É—â–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {all_logins - matched_logins}"

    # === –¢–µ—Å—Ç 2: –ù–µ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    seen = set()
    for group in result:
        for p in group["participants"]:
            assert p not in seen, f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {p} –≤ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –≥—Ä—É–ø–ø–∞—Ö"
            seen.add(p)

    # === –¢–µ—Å—Ç 3: –í—Å–µ –≥—Ä—É–ø–ø—ã —Å 2+ —á–µ–ª–æ–≤–µ–∫ ‚Äî –∏–º–µ—é—Ç –≤—Ä–µ–º—è –∏ –º–µ—Å—Ç–æ
    solo_count = 0
    for group in result:
        participants = group["participants"]
        if len(participants) == 1:
            solo_count += 1
            continue
        assert group["lunch_time"] is not None, f"‚ùå –ì—Ä—É–ø–ø–∞ {participants} –±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏"
        assert group["place"] is not None, f"‚ùå –ì—Ä—É–ø–ø–∞ {participants} –±–µ–∑ –º–µ—Å—Ç–∞"
        start, end = group["lunch_time"]
        duration = time_diff(end, start)
        # –ü—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç max_lunch_duration –ª—é–±–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
        user_dict = {u["login"]: u for u in users}
        participant_users = [user_dict[login] for login in participants]
        min_max_duration = min(u["parameters"]["max_lunch_duration"] for u in participant_users)
        assert duration <= min_max_duration, f"‚ùå –ì—Ä—É–ø–ø–∞ {participants} –ø—Ä–µ–≤—ã—Å–∏–ª–∞ –≤—Ä–µ–º—è: {duration} > {min_max_duration} –º–∏–Ω"

    print(f"‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–æ–π–¥–µ–Ω–∞. –û–¥–∏–Ω–æ—á–∫–∏: {solo_count}")

    # === –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª—é–±–∏–º—ã—Ö –∏ –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã—Ö –º–µ—Å—Ç
    places_data = load_places(PLACES_FILE)
    places_dict = {p["name"]: p for p in places_data}

    for group in result:
        if len(group["participants"]) == 1:
            continue
        place_name = group["place"]
        assert place_name in places_dict, f"‚ùå –ú–µ—Å—Ç–æ {place_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ places.csv"

        # –ü—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ –º–µ—Å—Ç–æ –Ω—Ä–∞–≤–∏—Ç—Å—è –≤—Å–µ–º
        user_dict = {u["login"]: u for u in users}
        for login in group["participants"]:
            user = user_dict[login]
            fav = user["parameters"]["favourite_places"]
            non_des = user["parameters"]["non_desirable_places"]
            assert place_name in fav, f"‚ùå {login} –Ω–µ –ª—é–±–∏—Ç {place_name}"
            assert place_name not in non_des, f"‚ùå {login} –ù–ï –õ–Æ–ë–ò–¢ {place_name}"

    print("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –ø—Ä–æ–π–¥–µ–Ω–∞")

    # === –¢–µ—Å—Ç 5: –†–∞–∑–º–µ—Ä –≥—Ä—É–ø–ø—ã —Å–æ–≤–º–µ—Å—Ç–∏–º —Å team_size_lst
    size_map = {
        2: ["2", "3-5", "6+"],
        3: ["3-5", "6+"],
        4: ["3-5", "6+"],
        5: ["3-5", "6+"],
        6: ["6+"],
        7: ["6+"],
        8: ["6+"],
        9: ["6+"],
        10: ["6+"],
    }

    for group in result:
        if len(group["participants"]) == 1:
            continue
        team_size = len(group["participants"])
        allowed_sizes = size_map.get(team_size, [])
        for login in group["participants"]:
            user = next(u for u in users if u["login"] == login)
            user_allowed = user["parameters"]["team_size_lst"]
            assert any(sz in allowed_sizes for sz in user_allowed), \
                f"‚ùå {login} –Ω–µ —Ä–∞–∑—Ä–µ—à–∞–µ—Ç –≥—Ä—É–ø–ø—É –∏–∑ {team_size} —á–µ–ª–æ–≤–µ–∫ (—Ä–∞–∑—Ä–µ—à–µ–Ω–æ: {user_allowed})"

    print("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –≥—Ä—É–ø–ø—ã –ø—Ä–æ–π–¥–µ–Ω–∞")

    # === –¢–µ—Å—Ç 6: –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –≥—Ä—É–ø–ø–∞ –Ω–µ –ø–µ—Ä–µ—Å–µ–∫–∞–µ—Ç—Å—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–≤–Ω—É—Ç—Ä–∏ –≥—Ä—É–ø–ø—ã ‚Äî –Ω–µ –Ω—É–∂–Ω–æ, —Ç.–∫. –æ–±—â–∏–π —Å–ª–æ—Ç)
    # –ù–æ –µ—Å–ª–∏ –±—ã –±—ã–ª–∞ –≥–ª–æ–±–∞–ª—å–Ω–∞—è —à–µ–¥—É–ª–∏–Ω–≥-–ª–æ–≥–∏–∫–∞ ‚Äî –ø—Ä–æ–≤–µ—Ä—è–ª–∏ –±—ã –º–µ–∂–¥—É –≥—Ä—É–ø–ø–∞–º–∏. –ü–æ–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º.

    # === –¢–µ—Å—Ç 7: –ú–∏–Ω–∏–º–∏–∑–∞—Ü–∏—è –æ–¥–∏–Ω–æ—á–µ–∫ ‚Äî –∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ, —á—Ç–æ–±—ã –±—ã–ª–æ < 5 –æ–¥–∏–Ω–æ—á–µ–∫
    assert solo_count <= 5, f"‚ùå –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –æ–¥–∏–Ω–æ—á–µ–∫: {solo_count}. –¶–µ–ª—å ‚Äî –º–∏–Ω–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å."

    print(f"üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! –ù–∞–π–¥–µ–Ω–æ {len(result)} –≥—Ä—É–ø–ø, –æ–¥–∏–Ω–æ—á–µ–∫: {solo_count}")

if __name__ == "__main__":
    run_tests()