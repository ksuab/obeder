# test_matcher.py

import json
import csv
import os
from datetime import time, datetime, timedelta
from matcher import match_lunch, load_places, parse_time

# –ü—É—Ç–∏ –∫ —Ç–µ—Å—Ç–æ–≤—ã–º —Ñ–∞–π–ª–∞–º
USERS_FILE = "test/users_to_match.json"
PLACES_FILE = "test/places.csv"
OUTPUT_FILE = "test/output.json"

def load_users():
    with open(USERS_FILE, "r", encoding="utf-8") as f:
        return json.load(f)

def save_result(result):
    with open(OUTPUT_FILE, "w", encoding="utf-8") as f:
        json.dump(result, f, ensure_ascii=False, indent=2)

def parse_time_str(t: str) -> time:
    return datetime.strptime(t, "%H:%M").time()

def time_diff(end: str, start: str) -> int:
    """–†–∞–∑–Ω–∏—Ü–∞ –≤ –º–∏–Ω—É—Ç–∞—Ö –º–µ–∂–¥—É –¥–≤—É–º—è –≤—Ä–µ–º–µ–Ω–∞–º–∏."""
    t_end = parse_time_str(end)
    t_start = parse_time_str(start)
    delta = timedelta(hours=t_end.hour, minutes=t_end.minute) - timedelta(hours=t_start.hour, minutes=t_start.minute)
    return int(delta.total_seconds() // 60)

def run_tests():
    print("üì• –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ...")
    users = load_users()
    print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")

    # –ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤ match_lunch
    print("üîç –ó–∞–ø—É—Å–∫–∞–µ–º –º—ç—Ç—á–∏–Ω–≥...")
    result = match_lunch(users, PLACES_FILE)
    save_result(result)
    print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ {OUTPUT_FILE}")

    # === –¢–µ—Å—Ç 1: –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
    all_logins = {u["login"] for u in users}
    matched_logins = set()
    for group in result:
        matched_logins.update(group["participants"])
    assert matched_logins == all_logins, f"‚ùå –ü—Ä–æ–ø—É—â–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {all_logins - matched_logins}"
    print("‚úÖ –¢–µ—Å—Ç 1: –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —É—á—Ç–µ–Ω—ã")

    # === –¢–µ—Å—Ç 2: –ù–µ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    seen = set()
    for group in result:
        for p in group["participants"]:
            assert p not in seen, f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {p} –≤ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –≥—Ä—É–ø–ø–∞—Ö"
            seen.add(p)
    print("‚úÖ –¢–µ—Å—Ç 2: –ù–µ—Ç –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")

    # === –¢–µ—Å—Ç 3: –í—Å–µ –≥—Ä—É–ø–ø—ã —Å 2+ —á–µ–ª–æ–≤–µ–∫ ‚Äî –∏–º–µ—é—Ç –≤—Ä–µ–º—è –∏ –º–µ—Å—Ç–æ
    solo_count = 0
    for group in result:
        participants = group["participants"]
        if len(participants) == 1:
            solo_count += 1
            continue
        assert group["lunch_time"] is not None, f"‚ùå –ì—Ä—É–ø–ø–∞ {participants} –±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏"
        assert group["place"] is not None, f"‚ùå –ì—Ä—É–ø–ø–∞ {participants} –±–µ–∑ –º–µ—Å—Ç–∞"
        start, end = group["lunch_time"]
        duration = time_diff(end, start)
        # –ü—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç max_lunch_duration –ª—é–±–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
        user_dict = {u["login"]: u for u in users}
        participant_users = [user_dict[login] for login in participants]
        min_max_duration = min(u["parameters"]["max_lunch_duration"] for u in participant_users)
        assert duration <= min_max_duration, f"‚ùå –ì—Ä—É–ø–ø–∞ {participants} –ø—Ä–µ–≤—ã—Å–∏–ª–∞ –≤—Ä–µ–º—è: {duration} > {min_max_duration} –º–∏–Ω"
    print("‚úÖ –¢–µ—Å—Ç 3: –í—Ä–µ–º—è –∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã")

    # === –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª—é–±–∏–º—ã—Ö –∏ –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã—Ö –º–µ—Å—Ç
    places_data = load_places(PLACES_FILE)
    places_dict = {p["name"]: p for p in places_data}

    for group in result:
        if len(group["participants"]) == 1:
            continue
        place_name = group["place"]
        assert place_name in places_dict, f"‚ùå –ú–µ—Å—Ç–æ {place_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ places.csv"

        user_dict = {u["login"]: u for u in users}
        for login in group["participants"]:
            user = user_dict[login]
            fav = user["parameters"]["favourite_places"]
            non_des = user["parameters"]["non_desirable_places"]
            assert place_name in fav, f"‚ùå {login} –Ω–µ –ª—é–±–∏—Ç {place_name}"
            assert place_name not in non_des, f"‚ùå {login} –ù–ï –õ–Æ–ë–ò–¢ {place_name}"
    print("‚úÖ –¢–µ—Å—Ç 4: –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ –º–µ—Å—Ç–∞–º —Å–æ–±–ª—é–¥–µ–Ω—ã")

    # === –¢–µ—Å—Ç 5: –†–∞–∑–º–µ—Ä –≥—Ä—É–ø–ø—ã —Å–æ–≤–º–µ—Å—Ç–∏–º —Å team_size_lst
    size_map = {
        2: ["2", "3-5", "6+"],
        3: ["3-5", "6+"],
        4: ["3-5", "6+"],
        5: ["3-5", "6+"],
        6: ["6+"],
        7: ["6+"],
        8: ["6+"],
        9: ["6+"],
        10: ["6+"],
    }

    for group in result:
        if len(group["participants"]) == 1:
            continue
        team_size = len(group["participants"])
        allowed_sizes = size_map.get(team_size, [])
        for login in group["participants"]:
            user = next(u for u in users if u["login"] == login)
            user_allowed = user["parameters"]["team_size_lst"]
            assert any(sz in allowed_sizes for sz in user_allowed), \
                f"‚ùå {login} –Ω–µ —Ä–∞–∑—Ä–µ—à–∞–µ—Ç –≥—Ä—É–ø–ø—É –∏–∑ {team_size} —á–µ–ª–æ–≤–µ–∫ (—Ä–∞–∑—Ä–µ—à–µ–Ω–æ: {user_allowed})"
    print("‚úÖ –¢–µ—Å—Ç 5: –†–∞–∑–º–µ—Ä—ã –≥—Ä—É–ø–ø —Ä–∞–∑—Ä–µ—à–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏")

    # === –¢–µ—Å—Ç 6: –í—Ä–µ–º—è –ª–∞–Ω—á–∞ –ø–æ–ø–∞–¥–∞–µ—Ç —Ö–æ—Ç—è –±—ã –≤ –æ–¥–∏–Ω –∏–∑ time_slots –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    for group in result:
        if len(group["participants"]) == 1:
            continue
        lunch_start, lunch_end = group["lunch_time"]
        start_t = parse_time_str(lunch_start)
        end_t = parse_time_str(lunch_end)

        user_dict = {u["login"]: u for u in users}
        for login in group["participants"]:
            user = user_dict[login]
            params = user["parameters"]

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ time_slots
            if "time_slots" not in params or not params["time_slots"]:
                assert False, f"‚ùå {login} –Ω–µ –∏–º–µ–µ—Ç time_slots"

            # –ü—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ —Å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∏–º —Å–ª–æ—Ç–æ–º
            fits = False
            for slot in params["time_slots"]:
                try:
                    slot_start, slot_end = slot
                    slot_start_t = parse_time_str(slot_start)
                    slot_end_t = parse_time_str(slot_end)

                    # –õ–∞–Ω—á –¥–æ–ª–∂–µ–Ω –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–æ–º–µ—â–∞—Ç—å—Å—è –≤ —Å–ª–æ—Ç
                    if start_t >= slot_start_t and end_t <= slot_end_t:
                        fits = True
                        break
                except Exception as e:
                    assert False, f"‚ùå –û—à–∏–±–∫–∞ –≤ time_slots —É {login}: {slot}"

            assert fits, f"‚ùå –í—Ä–µ–º—è –ª–∞–Ω—á–∞ {lunch_start}-{lunch_end} –Ω–µ –≤—Ö–æ–¥–∏—Ç –Ω–∏ –≤ –æ–¥–∏–Ω —Å–ª–æ—Ç {login}: {params['time_slots']}"
    print("‚úÖ –¢–µ—Å—Ç 6: –í—Ä–µ–º—è –ª–∞–Ω—á–∞ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ time_slot")

    # === –¢–µ—Å—Ç 7: –ú–∏–Ω–∏–º–∏–∑–∞—Ü–∏—è –æ–¥–∏–Ω–æ—á–µ–∫ ‚Äî –∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ, —á—Ç–æ–±—ã –±—ã–ª–æ < 5 –æ–¥–∏–Ω–æ—á–µ–∫
    assert solo_count <= 5, f"‚ùå –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –æ–¥–∏–Ω–æ—á–µ–∫: {solo_count}. –¶–µ–ª—å ‚Äî –º–∏–Ω–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å."
    print(f"‚úÖ –¢–µ—Å—Ç 7: –û–¥–∏–Ω–æ—á–µ–∫ –≤—Å–µ–≥–æ {solo_count} (<=5)")

    # === –¢–µ—Å—Ç 8: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    assert len(users) > 0, "‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –º—ç—Ç—á–∏–Ω–≥–∞"
    print("‚úÖ –¢–µ—Å—Ç 8: –ï—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")

    # === –¢–µ—Å—Ç 9: –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –≤—Ä–µ–º—è –ª–∞–Ω—á–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–æ
    for group in result:
        lunch_time = group["lunch_time"]
        if len(group["participants"]) > 1:
            assert isinstance(lunch_time, list) and len(lunch_time) == 2, f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏: {lunch_time}"
            start, end = lunch_time
            assert ":" in start and ":" in end, f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏: {start}, {end}"
            try:
                parse_time_str(start)
                parse_time_str(end)
            except ValueError:
                assert False, f"‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω–æ–µ –≤—Ä–µ–º—è: {start} –∏–ª–∏ {end}"
    print("‚úÖ –¢–µ—Å—Ç 9: –§–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω")

    # === –¢–µ—Å—Ç 10: –£ –∫–∞–∂–¥–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –µ—Å—Ç—å –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –º–µ–∂–¥—É –µ–≥–æ —Å–ª–æ—Ç–∞–º–∏ –∏ –≤—Ä–µ–º–µ–Ω–µ–º –ª–∞–Ω—á–∞
    for group in result:
        if len(group["participants"]) == 1:
            continue
        lunch_start, lunch_end = group["lunch_time"]
        start_t = parse_time_str(lunch_start)
        end_t = parse_time_str(lunch_end)

        user_dict = {u["login"]: u for u in users}
        for login in group["participants"]:
            user = user_dict[login]
            params = user["parameters"]

            assert "time_slots" in params, f"‚ùå {login} –Ω–µ –∏–º–µ–µ—Ç time_slots"

            has_overlap = False
            for slot in params["time_slots"]:
                try:
                    s1, e1 = parse_time_str(slot[0]), parse_time_str(slot[1])
                    # –ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ: –Ω–∞—á–∞–ª–æ –ª–∞–Ω—á–∞ < –∫–æ–Ω—Ü–∞ —Å–ª–æ—Ç–∞ –ò –∫–æ–Ω–µ—Ü –ª–∞–Ω—á–∞ > –Ω–∞—á–∞–ª–∞ —Å–ª–æ—Ç–∞
                    if start_t < e1 and end_t > s1:
                        has_overlap = True
                        break
                except:
                    assert False, f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–ª–æ—Ç–∞ —É {login}: {slot}"

            assert has_overlap, f"‚ùå {login} –Ω–µ –º–æ–∂–µ—Ç –ø–æ—Å–µ—Ç–∏—Ç—å –ª–∞–Ω—á –≤ {lunch_start}-{lunch_end} (–Ω–µ—Ç –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è —Å–æ —Å–ª–æ—Ç–∞–º–∏)"
    print("‚úÖ –¢–µ—Å—Ç 10: –í—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –∏–º–µ—é—Ç –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏")

    # === –¢–µ—Å—Ç 11: –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –º—ç—Ç—á–∏–Ω–≥ —Å—Ç–∞–±–∏–ª–µ–Ω (–ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—É—Å–∫ –¥–∞—ë—Ç —Ç–æ—Ç –∂–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç)
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Ç–æ—Ä–æ–π —Ä–∞–∑ –∏ —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º
    result2 = match_lunch(users, PLACES_FILE)
    # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø–æ –∫–ª—é—á–µ–≤—ã–º –ø–æ–ª—è–º: —É—á–∞—Å—Ç–Ω–∏–∫–∏, –≤—Ä–µ–º—è, –º–µ—Å—Ç–æ
    def normalize_group(g):
        return {
            "participants": sorted(g["participants"]),
            "lunch_time": tuple(g["lunch_time"]) if g["lunch_time"] else None,
            "place": g["place"]
        }
    norm1 = sorted([normalize_group(g) for g in result], key=lambda x: (x["participants"], x["place"]))
    norm2 = sorted([normalize_group(g) for g in result2], key=lambda x: (x["participants"], x["place"]))
    assert norm1 == norm2, "‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç –º—ç—Ç—á–∏–Ω–≥–∞ –Ω–µ—Å—Ç–∞–±–∏–ª–µ–Ω –º–µ–∂–¥—É –∑–∞–ø—É—Å–∫–∞–º–∏"
    print("‚úÖ –¢–µ—Å—Ç 11: –ú—ç—Ç—á–∏–Ω–≥ —Å—Ç–∞–±–∏–ª–µ–Ω –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –∑–∞–ø—É—Å–∫–∞—Ö")

    # === –¢–µ—Å—Ç 12: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (–º–∞–∫—Å. 5 —Å–µ–∫—É–Ω–¥)
    import time as tm
    start_time = tm.time()
    for _ in range(3):  # –°—Ä–µ–¥–Ω–µ–µ –ø–æ 3 –∑–∞–ø—É—Å–∫–∞–º
        match_lunch(users, PLACES_FILE)
    avg_time = (tm.time() - start_time) / 3
    assert avg_time < 5, f"‚ùå –ú—ç—Ç—á–∏–Ω–≥ —Å–ª–∏—à–∫–æ–º –º–µ–¥–ª–µ–Ω–Ω—ã–π: {avg_time:.2f} —Å–µ–∫"
    print(f"‚úÖ –¢–µ—Å—Ç 12: –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ö–æ—Ä–æ—à–∞—è: {avg_time:.2f} —Å–µ–∫ –≤ —Å—Ä–µ–¥–Ω–µ–º")

    # === –¢–µ—Å—Ç 13: –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –≤—Å–µ –º–µ—Å—Ç–∞ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ ‚Äî —Ä–µ–∞–ª—å–Ω—ã–µ (–∏–∑ CSV)
    used_places = {g["place"] for g in result if g["place"] is not None}
    valid_places = {p["name"] for p in places_data}
    invalid = used_places - valid_places
    assert not invalid, f"‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –º–µ—Å—Ç–∞: {invalid}"
    print("‚úÖ –¢–µ—Å—Ç 13: –í—Å–µ –º–µ—Å—Ç–∞ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –≤ places.csv")

    # === –¢–µ—Å—Ç 14: –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∫–∞–∑–∞–ª —Ç–æ–ª—å–∫–æ "6+", —Ç–æ –æ–Ω –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –≥—Ä—É–ø–ø–µ –∏–∑ 2
    for group in result:
        size = len(group["participants"])
        if size == 2:
            for login in group["participants"]:
                user = next(u for u in users if u["login"] == login)
                allowed = user["parameters"]["team_size_lst"]
                assert "2" in allowed or "3-5" in allowed or "6+" in allowed, \
                    f"‚ùå {login} —Å team_size_lst={allowed} –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –≥—Ä—É–ø–ø–µ –∏–∑ 2"

    print("‚úÖ –¢–µ—Å—Ç 14: –£—á—ë—Ç —Å—Ç—Ä–æ–≥–∏—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –ø–æ —Ä–∞–∑–º–µ—Ä—É –∫–æ–º–∞–Ω–¥—ã")

    # === –¢–µ—Å—Ç 15: –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –≥—Ä—É–ø–ø—ã –Ω–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–µ –±–æ–ª—å—à–µ 10)
    max_group_size = 10
    for group in result:
        size = len(group["participants"])
        assert size <= max_group_size, f"‚ùå –ì—Ä—É–ø–ø–∞ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∞—è: {size} > {max_group_size}"
    print(f"‚úÖ –¢–µ—Å—Ç 15: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –≥—Ä—É–ø–ø—ã ‚Äî {max_group_size}")

    print(f"üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! –ù–∞–π–¥–µ–Ω–æ {len(result)} –≥—Ä—É–ø–ø, –æ–¥–∏–Ω–æ—á–µ–∫: {solo_count}")
    print("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –î–æ–±–∞–≤—å —Ç–µ—Å—Ç—ã —Å edge-–∫–µ–π—Å–∞–º–∏ (–ø—É—Å—Ç—ã–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è, –æ–¥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏ —Ç.–ø.)")

    # === –¢–µ—Å—Ç 15: –ù–µ—Ç –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –≥—Ä—É–ø–ø—ã
    max_possible_size = len(users)
    max_actual_size = max(len(g["participants"]) for g in result) if result else 0

    # –ï—Å–ª–∏ –≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–æ–≤–º–µ—Å—Ç–∏–º—ã, —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–¥–Ω–∞ –±–æ–ª—å—à–∞—è –≥—Ä—É–ø–ø–∞
    compatible_pair = True
    if len(users) > 1:
        # –ü—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞: –µ—Å–ª–∏ —Ö–æ—Ç—è –±—ã –¥–≤–æ–µ —Å–æ–≤–º–µ—Å—Ç–∏–º—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –∏ –º–µ—Å—Ç—É ‚Äî –±–æ–ª—å—à–∞—è –≥—Ä—É–ø–ø–∞ –≤–æ–∑–º–æ–∂–Ω–∞
        u1, u2 = users[0], users[1]
        t1_start = parse_time_str(u1["parameters"]["available_from"])
        t1_end = parse_time_str(u1["parameters"]["available_to"])
        t2_start = parse_time_str(u2["parameters"]["available_from"])
        t2_end = parse_time_str(u2["parameters"]["available_to"])
        time_overlap = t1_start < t2_end and t2_start < t1_end
        common_places = set(u1["parameters"]["favourite_places"]) & set(u2["parameters"]["favourite_places"])
        common_places -= set(u1["parameters"]["non_desirable_places"])
        common_places -= set(u2["parameters"]["non_desirable_places"])
        compatible_pair = time_overlap and len(common_places) > 0

    if compatible_pair and len(users) >= 3:
        assert max_actual_size >= 3, f"‚ùå –ü—Ä–∏ —Å–æ–≤–º–µ—Å—Ç–∏–º—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö –Ω–µ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞ –≥—Ä—É–ø–ø–∞ ‚â•3 (–º–∞–∫—Å–∏–º—É–º: {max_actual_size})"
    else:
        print(f"‚ÑπÔ∏è –¢–µ—Å—Ç 15: –ë–æ–ª—å—à–∏–µ –≥—Ä—É–ø–ø—ã –º–∞–ª–æ–≤–µ—Ä–æ—è—Ç–Ω—ã –∏–∑-–∑–∞ –Ω–µ—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏")

    print("‚úÖ –¢–µ—Å—Ç 15: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –Ω–∞ —Ä–∞–∑–º–µ—Ä –≥—Ä—É–ø–ø—ã")

if __name__ == "__main__":
    run_tests()